# diagnose_prediction.py
import json
from tender_analysis_system import TenderAnalysisSystem

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–∏—Å—Ç–µ–º—É
system = TenderAnalysisSystem()
system.initialize_system()
system.load_system("tender_system_trained.pkl")

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—ñ
with open('supplier_profiles_with_clusters.json', 'r', encoding='utf-8') as f:
    profiles = json.load(f)

# –¢–µ—Å—Ç–æ–≤–∏–π —Ç–µ–Ω–¥–µ—Ä
test_tender = {
    "EDRPOU": "36074695",
    "F_ITEMNAME": "SIEMENS 3RT2016-2BB41",
    "F_TENDERNAME": "–ó–∞–∫—É–ø—ñ–≤–ª—è –µ–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—Ä–æ–¥—É–∫—Ü—ñ—ó –∑ –æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–æ—é –ø–æ—Ç—Ä–µ–±–æ—é –Ω–∞ 2025—Ä",
    "F_INDUSTRYNAME": "–ï–ª–µ–∫—Ç—Ä–æ—Ç–æ–≤–∞—Ä–∏, –∫–∞–±–µ–ª—å–Ω–æ–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫–æ–≤–∞ –ø—Ä–æ–¥—É–∫—Ü—ñ—è"
}

# –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª
profile = profiles.get("36074695")
print("üìä –ü–†–û–§–Ü–õ–¨ –ü–û–°–¢–ê–ß–ê–õ–¨–ù–ò–ö–ê:")
print(f"–ù–∞–∑–≤–∞: {profile['name']}")
print(f"Win rate: {profile['metrics']['win_rate']:.1%}")
print(f"–î–æ—Å–≤—ñ–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {profile['categories'].get('–ï–ª–µ–∫—Ç—Ä–æ—Ç–æ–≤–∞—Ä–∏, –∫–∞–±–µ–ª—å–Ω–æ–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫–æ–≤–∞ –ø—Ä–æ–¥—É–∫—Ü—ñ—è', {}).get('win_rate', 0):.1%}")
print(f"–ë—Ä–µ–Ω–¥–∏: {profile.get('brand_expertise', [])}")

# –í–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ –æ–∑–Ω–∞–∫–∏
features = system.feature_extractor.extract_features(test_tender, profile)

print("\nüîç –í–ò–¢–Ø–ì–ù–£–¢–Ü –û–ó–ù–ê–ö–ò:")
# –ö–ª—é—á–æ–≤—ñ –æ–∑–Ω–∞–∫–∏ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
print(f"\n–û–∑–Ω–∞–∫–∏ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞:")
print(f"  supplier_win_rate: {features.get('supplier_win_rate', 0):.3f}")
print(f"  supplier_experience: {features.get('supplier_experience', 0)}")
print(f"  supplier_category_win_rate: {features.get('supplier_category_win_rate', 0):.3f}")
print(f"  supplier_category_experience: {features.get('supplier_category_experience', 0)}")

# –ë—Ä–µ–Ω–¥–∏
print(f"\n–ë—Ä–µ–Ω–¥–æ–≤—ñ –æ–∑–Ω–∞–∫–∏:")
print(f"  has_brand: {features.get('has_brand', 0)}")
print(f"  brand_count: {features.get('brand_count', 0)}")

# –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è
print(f"\n–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ñ –æ–∑–Ω–∞–∫–∏:")
print(f"  competition_intensity: {features.get('competition_intensity', 0):.3f}")
print(f"  market_concentration: {features.get('market_concentration', 0):.3f}")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
print(f"\n–ö–∞—Ç–µ–≥–æ—Ä—ñ–π–Ω—ñ –æ–∑–Ω–∞–∫–∏:")
print(f"  primary_category: {features.get('primary_category', '')}")
print(f"  category_confidence: {features.get('category_confidence', 0):.3f}")

# –í—Å—ñ –æ–∑–Ω–∞–∫–∏
print(f"\nüìã –í–°–Ü –û–ó–ù–ê–ö–ò ({len(features)}):")
for key, value in sorted(features.items()):
    if isinstance(value, float):
        print(f"  {key}: {value:.3f}")
    else:
        print(f"  {key}: {value}")

# –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
predictions = system.predict_tender_outcomes([test_tender])
print("\nüìà –ü–†–û–ì–ù–û–ó: ")
# –Ø–∫—â–æ predictions ‚Äî —Ü–µ —Ä—è–¥–æ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, JSON), —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –π–æ–≥–æ —É —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
print(predictions)
