# run_improved_system.py
import json
import sys
from pathlib import Path
from tender_analysis_system import TenderAnalysisSystem
from api_interface import TenderPredictionAPI


def main():
    # 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∞–Ω–∞–ª—ñ–∑—É —Ç–µ–Ω–¥–µ—Ä—ñ–≤...")
    
    system = TenderAnalysisSystem(
        categories_file="categories.jsonl"
    )
    
    if not system.initialize_system():
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏")
        return
    
    # 2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    data_file = "your_tender_data.jsonl"  # –í–∫–∞–∂—ñ—Ç—å –≤–∞—à —Ñ–∞–π–ª
    
    if not Path(data_file).exists():
        print(f"‚ùå –§–∞–π–ª {data_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –î–ª—è –≤–µ–ª–∏–∫–∏—Ö —Ñ–∞–π–ª—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:
    # results = system.process_large_dataset(data_file)
    
    # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤:
    print("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...")
    data = []
    with open(data_file, 'r', encoding='utf-8') as f:
        for i, line in enumerate(f):
            data.append(json.loads(line))
            if i >= 10000:  # –û–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è —Ç–µ—Å—Ç—É
                break
    
    # 3. –û–±—Ä–æ–±–∫–∞ —Ç–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    print("üìä –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö...")
    system.load_and_process_data(data)
    
    print("üéØ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ...")
    training_results = system.train_prediction_model()
    print(f"‚úÖ –ú–æ–¥–µ–ª—å –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω–∞. AUC: {training_results['performance_metrics']['auc_score']:.4f}")
    
    # 4. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è API
    api = TenderPredictionAPI(system)
    
    # 5. –¢–µ—Å—Ç–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑
    print("\nüîÆ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è...")
    test_tender = data[0]  # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π —Ç–µ–Ω–¥–µ—Ä –¥–ª—è —Ç–µ—Å—Ç—É
    result = api.predict_single_tender(test_tender)
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑—É:")
    print(f"- –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–≥–∏: {result['prediction']['win_probability']:.3f}")
    print(f"- –†—ñ–≤–µ–Ω—å –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ—ó: {result['prediction']['confidence']}")
    print(f"- –û—á—ñ–∫—É–≤–∞–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è: {result['competition']['level']}")
    
    # 6. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏
    print("\nüíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏...")
    system.save_system("tender_system_improved.pkl")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
    
    # 7. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
    print("\nüìà –ó–≤—ñ—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:")
    report = system.predictor.monitor.generate_monitoring_report()
    print(json.dumps(report, indent=2, ensure_ascii=False))


if __name__ == "__main__":
    main()