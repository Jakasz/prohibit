# 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
from pathlib import Path
from tender_analysis_system import TenderAnalysisSystem



system = TenderAnalysisSystem(
    categories_file="categories.jsonl",
    qdrant_host="localhost",
    qdrant_port=6333
)
system.initialize_system()

# 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏
db_size = system.vector_db.get_collection_size()
print(f"üìä –ó–∞–ø–∏—Å—ñ–≤ —É –≤–µ–∫—Ç–æ—Ä–Ω—ñ–π –±–∞–∑—ñ: {db_size:,}")

if db_size < 1000:
    print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è!")
    exit(1)

# 3. –û–ü–¶–Ü–û–ù–ê–õ–¨–ù–û: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤ (–ø–æ–∫—Ä–∞—â—É—î —è–∫—ñ—Å—Ç—å)
profiles_files = [
    "supplier_profiles_with_clusters.json",
    "supplier_profiles_COMPLETE.json"
]
profiles_loaded = False

for profiles_file in profiles_files:
    if Path(profiles_file).exists():
        system.supplier_profiler.load_profiles(profiles_file)
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(system.supplier_profiler.profiles)} –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –∑ {profiles_file}")
        profiles_loaded = True
        break

if not profiles_loaded:
    print("‚ö†Ô∏è –ü—Ä–æ—Ñ—ñ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ...")
    
    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    from update_supplier_profiles_with_clusters import ProfileBuilderWithClusters
    
    builder = ProfileBuilderWithClusters(system.vector_db)
    profiles = builder.build_profiles_from_vector_db()
    builder.save_profiles()
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ
    system.supplier_profiler.load_profiles("supplier_profiles_with_clusters.json")
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(system.supplier_profiler.profiles)} –ø—Ä–æ—Ñ—ñ–ª—ñ–≤")


# 4. –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ –ù–ê –î–ê–ù–ò–• –ó –í–ï–ö–¢–û–†–ù–û–á –ë–ê–ó–ò
try:
    results = system.train_prediction_model(
        validation_split=0.2,  # 20% –Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é
        cv_folds=5            # 5-fold cross-validation
    )
    
    print("\n‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø—ñ—à–Ω–æ –Ω–∞–≤—á–µ–Ω–∞!")
    print(f"üìä –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∑—Ä–∞–∑–∫—ñ–≤: {results['training_samples']:,}")
    print(f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–∑–Ω–∞–∫: {results['feature_count']}")
    print(f"üìä –ß–∞—Å—Ç–∫–∞ –ø–µ—Ä–µ–º–æ–≥: {results['positive_rate']:.1%}")
    print(f"üìä AUC Score: {results['performance_metrics'].get('ensemble', {}).get('test_auc', 0):.4f}")
    
except Exception as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—á–∞–Ω–Ω—è: {e}")
    exit(1)

# 5. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–≤—á–µ–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
system.save_system("tender_system_trained.pkl")
print("üíæ –°–∏—Å—Ç–µ–º–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞!")

# 6. –¢–µ—Å—Ç–æ–≤–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è
test_tender = {
    "EDRPOU": "12345678",
    "F_ITEMNAME": "–§—ñ–ª—å—Ç—Ä –ø–∞–ª–∏–≤–Ω–∏–π –¥–ª—è —Ç—Ä–∞–∫—Ç–æ—Ä–∞ John Deere",
    "F_TENDERNUMBER": "UA-2024-01-01-000001",
    "F_INDUSTRYNAME": "–°—ñ–ª—å—Å—å–∫–µ –≥–æ—Å–ø–æ–¥–∞—Ä—Å—Ç–≤–æ"
}

predictions = system.predict_tender_outcomes([test_tender])
print(f"\nüîÆ –¢–µ—Å—Ç–æ–≤–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è:")
print(f"–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–≥–∏: {predictions['predictions'].get(test_tender['F_TENDERNUMBER'], {}).get('probability', 0):.2%}")