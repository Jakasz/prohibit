# 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
from pathlib import Path

import pandas as pd
from tender_analysis_system import TenderAnalysisSystem



system = TenderAnalysisSystem(
    categories_file="categories.jsonl",
    qdrant_host="localhost",
    qdrant_port=6333
)
system.initialize_system()

# 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏
db_size = system.vector_db.get_collection_size()
print(f"üìä –ó–∞–ø–∏—Å—ñ–≤ —É –≤–µ–∫—Ç–æ—Ä–Ω—ñ–π –±–∞–∑—ñ: {db_size:,}")

if db_size < 1000:
    print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è!")

exit(1)

# 3. –û–ü–¶–Ü–û–ù–ê–õ–¨–ù–û: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤ (–ø–æ–∫—Ä–∞—â—É—î —è–∫—ñ—Å—Ç—å)
profiles_files = [
    "supplier_profiles_with_clusters.json"
]
profiles_loaded = False

for profiles_file in profiles_files:
    if Path(profiles_file).exists():
        system.supplier_profiler.load_profiles(profiles_file)
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(system.supplier_profiler.profiles)} –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –∑ {profiles_file}")
        profiles_loaded = True
        break

# if not profiles_loaded:
#     print("‚ö†Ô∏è –ü—Ä–æ—Ñ—ñ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ...")
    
#     # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
#     from update_with_clusters import ProfileBuilderWithClusters
    
#     builder = ProfileBuilderWithClusters(system.vector_db)
#     profiles = builder.build_profiles_from_vector_db()
#     builder.save_profiles()
    
#     # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ
#     system.supplier_profiler.load_profiles("supplier_profiles_with_clusters.json")
#     print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(system.supplier_profiler.profiles)} –ø—Ä–æ—Ñ—ñ–ª—ñ–≤")


# 4. –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ –ù–ê –î–ê–ù–ò–• –ó –í–ï–ö–¢–û–†–ù–û–á –ë–ê–ó–ò
try:
    results = system.train_prediction_model(
        validation_split=0.2,  # 20% –Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é
        cv_folds=5            # 5-fold cross-validation
    )
    
    print("\n‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø—ñ—à–Ω–æ –Ω–∞–≤—á–µ–Ω–∞!")
    print(f"üìä –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∑—Ä–∞–∑–∫—ñ–≤: {results['training_samples']:,}")
    print(f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–∑–Ω–∞–∫: {results['feature_count']}")
    print(f"üìä –ß–∞—Å—Ç–∫–∞ –ø–µ—Ä–µ–º–æ–≥: {results['positive_rate']:.1%}")
    print(f"üìä AUC Score: {results['performance_metrics'].get('ensemble', {}).get('test_auc', 0):.4f}")
    
except Exception as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—á–∞–Ω–Ω—è: {e}")
    exit(1)

# 5. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–≤—á–µ–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
system.save_system("tender_system_trained.pkl")
print("üíæ –°–∏—Å—Ç–µ–º–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞!")

print("\nüîç SHAP –ê–ù–ê–õ–Ü–ó –ú–û–î–ï–õ–Ü")
print("="*60)

try:
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ SHAP –∞–Ω–∞–ª—ñ–∑
    shap_results = system.predictor.analyze_with_shap(
        sample_size=2000,  # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ 2000 –ø—Ä–∏–∫–ª–∞–¥—ñ–≤
        save_plots=True    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≥—Ä–∞—Ñ—ñ–∫–∏
    )
    
    print("\n‚úÖ SHAP –∞–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üìä –ì—Ä–∞—Ñ—ñ–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ø–∞–ø—Ü—ñ shap_plots/")
    print("üìÑ –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –≤ shap_analysis_report.json")
    
except Exception as e:
    print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ SHAP –∞–Ω–∞–ª—ñ–∑: {e}")

# 7. –¢–µ—Å—Ç–æ–≤–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É
print("\nüéØ –ü–†–ò–ö–õ–ê–î –ü–û–Ø–°–ù–ï–ù–ù–Ø –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ü–†–û–ì–ù–û–ó–£")
print("="*60)

# –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
test_example = {
    "EDRPOU": "12345678",
    "F_ITEMNAME": "–§—ñ–ª—å—Ç—Ä –ø–∞–ª–∏–≤–Ω–∏–π –¥–ª—è —Ç—Ä–∞–∫—Ç–æ—Ä–∞ John Deere",
    "F_TENDERNAME": "–ó–∞–∫—É–ø—ñ–≤–ª—è –∑–∞–ø—á–∞—Å—Ç–∏–Ω –¥–ª—è —Å—ñ–ª—å—Å—å–∫–æ–≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫–æ—ó —Ç–µ—Ö–Ω—ñ–∫–∏",
    "F_INDUSTRYNAME": "–°—ñ–ª—å—Å—å–∫–æ–≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫—ñ –∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏"
}

try:
    # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: —è–∫—â–æ –º–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
    supplier_profile = None
    if system.supplier_analyzer:
        supplier_profile = system.supplier_analyzer.get_supplier_profile(test_example['EDRPOU'])
    
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ—è—Å–Ω–µ–Ω–Ω—è
    explanation = system.predictor.explain_single_prediction(
        test_example, 
        supplier_profile=supplier_profile,
        show_plot=False  # True —è–∫—â–æ —Ö–æ—á–µ—Ç–µ –≥—Ä–∞—Ñ—ñ–∫
    )
    
except Exception as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—è—Å–Ω–µ–Ω–Ω—è: {e}")
    import traceback
    traceback.print_exc()

