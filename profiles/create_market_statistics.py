"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä–∏–Ω–∫–æ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""

import logging
import pickle
from pathlib import Path
from market_statistics import MarketStatistics
from category_manager import CategoryManager

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def main():
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–µ—à—É
    cache_file = "files/all_data_cache.pkl"
    
    if not Path(cache_file).exists():
        logger.error(f"‚ùå –§–∞–π–ª {cache_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        logger.info("üí° –°–ø—Ä–æ–±—É–π—Ç–µ —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–µ—à—É")
        return
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
    logger.info("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤...")
    
    # –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    category_manager = CategoryManager("categories.jsonl")
    if Path("categories_map.json").exists():
        category_manager.load_category_mappings("categories_map.json")
    
    # –†–∏–Ω–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    market_stats = MarketStatistics(category_manager=category_manager)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ –∫–µ—à—É
    logger.info(f"üìà –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–∏–Ω–∫–æ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ {cache_file}...")
    results = market_stats.calculate_market_statistics_from_cache(cache_file)
    
    if results:
        logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞!")
        logger.info(f"   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä—ñ–π –æ–±—Ä–æ–±–ª–µ–Ω–æ: {results['categories_processed']}")
        
        # –ü—Ä–∏–∫–ª–∞–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫—ñ–ª—å–∫–æ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        if market_stats.category_stats:
            logger.info("\nüìä –ü—Ä–∏–∫–ª–∞–¥–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
            
            for i, (category, stats) in enumerate(list(market_stats.category_stats.items())[:5]):
                logger.info(f"\n{i+1}. {category}:")
                logger.info(f"   ‚Ä¢ –¢–µ–Ω–¥–µ—Ä—ñ–≤: {stats['total_tenders']:,}")
                logger.info(f"   ‚Ä¢ –ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤: {stats['total_suppliers']:,}")
                logger.info(f"   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è: {stats['avg_suppliers_per_tender']:.1f} —É—á–∞—Å–Ω–∏–∫—ñ–≤/—Ç–µ–Ω–¥–µ—Ä")
                logger.info(f"   ‚Ä¢ Win rate –Ω–æ–≤–∞—á–∫—ñ–≤: {stats['new_supplier_win_rate']:.1%}")
                logger.info(f"   ‚Ä¢ –í—ñ–¥–∫—Ä–∏—Ç—ñ—Å—Ç—å —Ä–∏–Ω–∫—É: {stats['market_openness']:.1%}")
                logger.info(f"   ‚Ä¢ –ë–∞—Ä'—î—Ä –≤—Ö–æ–¥—É: {stats['entry_barrier_score']:.1%}")
    else:
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")


if __name__ == "__main__":
    main()