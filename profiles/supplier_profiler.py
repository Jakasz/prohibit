import json
from pathlib import Path
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any, Set
from collections import defaultdict, Counter
import logging
from dataclasses import dataclass, field
import re

import tqdm


@dataclass
class SupplierMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞"""
    total_tenders: int = 0
    won_tenders: int = 0
    total_positions: int = 0
    won_positions: int = 0
    win_rate: float = 0.0
    position_win_rate: float = 0.0
    recent_win_rate: float = 0.0
    growth_rate: float = 0.0
    stability_score: float = 0.0
    specialization_score: float = 0.0
    competition_resistance: float = 0.0


@dataclass
class SupplierProfile:
    """–ü–æ–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞"""
    edrpou: str
    name: str
    metrics: SupplierMetrics = field(default_factory=SupplierMetrics)
    categories: Dict[str, Dict[str, Any]] = field(default_factory=dict)
    industries: Dict[str, Dict[str, Any]] = field(default_factory=dict)
    clusters: Dict[str, Dict[str, Any]] = field(default_factory=dict)
    cpv_experience: Dict[str, Dict[str, Any]] = field(default_factory=dict)
    brand_expertise: List[str] = field(default_factory=list)
    competitive_advantages: List[str] = field(default_factory=list)
    weaknesses: List[str] = field(default_factory=list)
    market_position: str = "unknown"
    reliability_score: float = 0.0
    profile_version: int = 1
    last_updated: str = field(default_factory=lambda: datetime.now().isoformat())
    risk_indicators: Dict[str, Dict[str, Any]] = field(default_factory=dict)
    has_risks: bool = False
    overall_risk_level: str = "low"
    top_competitors: List[Tuple[str, float]] = field(default_factory=list)
    bottom_competitors: List[Tuple[str, float]] = field(default_factory=list)    
    
    def to_dict(self) -> Dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ —Å–ª–æ–≤–Ω–∏–∫"""
        return {
            'edrpou': self.edrpou,
            'name': self.name,
            'metrics': {
                'total_tenders': self.metrics.total_tenders,
                'won_tenders': self.metrics.won_tenders,
                'total_positions': self.metrics.total_positions,
                'won_positions': self.metrics.won_positions,
                'win_rate': self.metrics.win_rate,
                'position_win_rate': self.metrics.position_win_rate,
                'recent_win_rate': self.metrics.recent_win_rate,
                'growth_rate': self.metrics.growth_rate,
                'stability_score': self.metrics.stability_score,
                'specialization_score': self.metrics.specialization_score,
                'competition_resistance': self.metrics.competition_resistance
            },
            'categories': self.categories,
            'industries': self.industries,
            'clusters' : self.clusters,  
            'cpv_experience': self.cpv_experience,
            'brand_expertise': self.brand_expertise,
            'competitive_advantages': self.competitive_advantages,
            'weaknesses': self.weaknesses,
            'market_position': self.market_position,
            'reliability_score': self.reliability_score,
            'profile_version': self.profile_version,
            'last_updated': self.last_updated,
            'risk_indicators': self.risk_indicators,
            'has_risks': self.has_risks,
            'overall_risk_level': self.overall_risk_level,
            'top_competitors': self.top_competitors,
            'bottom_competitors': self.bottom_competitors
        }


class SupplierProfiler:
    """–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ñ—ñ–ª—é–≤–∞–Ω–Ω—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤"""
    
    def __init__(self, categories_manager=None, vector_db=None):
        self.profiles: Dict[str, SupplierProfile] = {}
        self.categories_manager = categories_manager
        self.market_benchmarks: Dict[str, float] = {}
        self.logger = logging.getLogger(__name__)
        
        # –ü–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
        self.brand_patterns = self._init_brand_patterns()
        self.quality_indicators = self._init_quality_indicators()
        self.vector_db = vector_db  # –î–æ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–µ–∫—Ç–æ—Ä–Ω—É –±–∞–∑—É

    def build_profiles_from_aggregated_data(self, aggregated_data: Dict[str, List[Dict]], 
                                       batch_size: int = 1000) -> Dict[str, Any]:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –∞–≥—Ä–µ–≥–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è —à–≤–∏–¥–∫–æ—ó –æ–±—Ä–æ–±–∫–∏ –≤–µ–ª–∏–∫–∏—Ö –æ–±'—î–º—ñ–≤
        """
        results = {
            'new_profiles': 0,
            'updated_profiles': 0,
            'errors': 0
        }
        
        # –û–±—Ä–æ–±–∫–∞ –±–∞—Ç—á–∞–º–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –ø–∞–º'—è—Ç—ñ
        edrpou_list = list(aggregated_data.keys())
        
        for i in range(0, len(edrpou_list), batch_size):
            batch_edrpou = edrpou_list[i:i + batch_size]
            
            for edrpou in batch_edrpou:
                try:
                    items = aggregated_data[edrpou]
                    if not items:
                        continue
                    
                    # –®–≤–∏–¥–∫–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
                    profile = self._create_minimal_profile(edrpou, items)
                    
                    if edrpou in self.profiles:
                        self.profiles[edrpou] = profile
                        results['updated_profiles'] += 1
                    else:
                        self.profiles[edrpou] = profile
                        results['new_profiles'] += 1
                        
                except Exception as e:
                    self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é {edrpou}: {e}")
                    results['errors'] += 1
            
            # –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ
            if i % (batch_size * 10) == 0:
                import gc
                gc.collect()
        
        return results

    def _create_minimal_profile(self, edrpou: str, items: List[Dict]) -> SupplierProfile:
        """–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ"""
        profile = SupplierProfile(
            edrpou=edrpou,
            name=items[0].get('supplier_name', '') if items else ''
        )
        
        # –¢—ñ–ª—å–∫–∏ –±–∞–∑–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
        tenders = set()
        won = 0
        
        for item in items:
            tender = item.get('tender_number', '')
            if tender:
                tenders.add(tender)
            if item.get('won'):
                won += 1
        
        profile.metrics.total_positions = len(items)
        profile.metrics.won_positions = won
        profile.metrics.total_tenders = len(tenders)
        profile.metrics.position_win_rate = won / len(items) if items else 0
        
        return profile


    def _init_brand_patterns(self) -> Dict[str, re.Pattern]:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–∞—Ç–µ—Ä–Ω—ñ–≤ –±—Ä–µ–Ω–¥—ñ–≤"""
        brands = [
            "FENDT", "JOHN DEERE", "CASE", "NEW HOLLAND", "CLAAS",
            "CATERPILLAR", "KOMATSU", "VOLVO", "SCANIA", "MAN",
            "MERCEDES", "BMW", "BOSCH", "SIEMENS", "ABB"
        ]
        return {brand: re.compile(rf'\b{brand}\b', re.IGNORECASE) for brand in brands}
    
    def _init_quality_indicators(self) -> Dict[str, List[str]]:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ —è–∫–æ—Å—Ç—ñ"""
        return {
            'premium': ['–æ—Ä–∏–≥—ñ–Ω–∞–ª', '–ø—Ä–µ–º—ñ—É–º', '–≤–∏—Å–æ–∫–æ—è–∫—ñ—Å', '—Å–µ—Ä—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω'],
            'standard': ['—Å—Ç–∞–Ω–¥–∞—Ä—Ç', '—è–∫—ñ—Å–Ω', '–Ω–∞–¥—ñ–π–Ω'],
            'budget': ['–µ–∫–æ–Ω–æ–º', '–±—é–¥–∂–µ—Ç', '–∞–Ω–∞–ª–æ–≥']
        }
    def build_profiles(self, update_mode: bool = False) -> Dict[str, Any]:
        """
        –ú–∞—Å–æ–≤–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤ –∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏ tender_vectors
        Args:
            update_mode: True –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
        """
        self.logger.info(f"üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏ tender_vectors...")

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö EDRPOU –∑ –±–∞–∑–∏
        all_edrpou = self.vector_db.get_all_supplier_ids()  # –ú–µ—Ç–æ–¥ –º–∞—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ EDRPOU

        self.logger.info(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(all_edrpou)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤ —É tender_vectors")

        results = {
            'total_suppliers': len(all_edrpou),
            'new_profiles': 0,
            'updated_profiles': 0,
            'errors': 0
        }

        for edrpou in tqdm(all_edrpou, desc="–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤"):
            try:
                # –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–≥—Ä–µ–≥–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –ø–æ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É –∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏
                supplier_data = self.vector_db.get_supplier_aggregate(edrpou)
                if not supplier_data:
                    continue

                if edrpou in self.profiles and update_mode:
                    self.update_profile_from_vector(edrpou, supplier_data)
                    results['updated_profiles'] += 1
                else:
                    profile = self.create_profile_from_vector(supplier_data)
                    if profile:
                        self.profiles[edrpou] = profile
                        results['new_profiles'] += 1
            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è {edrpou}: {e}")
                results['errors'] += 1

        self.logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤: {results['new_profiles']}")
        self.logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤: {results['updated_profiles']}")

        return results

    def create_profile_from_vector(self, supplier_data: Dict) -> SupplierProfile:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ –∑ –∞–≥—Ä–µ–≥–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏"""
        edrpou = supplier_data.get('EDRPOU', '') or supplier_data.get('edrpou', '')
        name = supplier_data.get('supplier_name', '') or supplier_data.get('supp_name', '')
        profile = SupplierProfile(edrpou=edrpou, name=name)

        # –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ –∑ –∞–≥—Ä–µ–≥–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        metrics = profile.metrics
        metrics.total_tenders = supplier_data.get('total_tenders', 0)
        metrics.won_tenders = supplier_data.get('won_tenders', 0)
        metrics.total_positions = supplier_data.get('total_positions', 0)
        metrics.won_positions = supplier_data.get('won_positions', 0)
        metrics.win_rate = supplier_data.get('win_rate', 0.0)
        metrics.position_win_rate = supplier_data.get('position_win_rate', 0.0)
        metrics.recent_win_rate = supplier_data.get('recent_win_rate', 0.0)
        metrics.growth_rate = supplier_data.get('growth_rate', 0.0)
        metrics.stability_score = supplier_data.get('stability_score', 0.0)
        metrics.specialization_score = supplier_data.get('specialization_score', 0.0)
        metrics.competition_resistance = supplier_data.get('competition_resistance', 0.0)

        # –Ü–Ω—à—ñ –ø–æ–ª—è –ø—Ä–æ—Ñ—ñ–ª—é
        profile.categories = supplier_data.get('categories', {})
        profile.industries = supplier_data.get('industries', {})
        profile.cpv_experience = supplier_data.get('cpv_experience', {})
        profile.brand_expertise = supplier_data.get('brand_expertise', [])
        profile.competitive_advantages = supplier_data.get('competitive_advantages', [])
        profile.weaknesses = supplier_data.get('weaknesses', [])
        profile.market_position = supplier_data.get('market_position', 'unknown')
        profile.reliability_score = supplier_data.get('reliability_score', 0.0)
        profile.profile_version = supplier_data.get('profile_version', 1)
        profile.last_updated = supplier_data.get('last_updated', datetime.now().isoformat())

        return profile

    def update_profile_from_vector(self, edrpou: str, supplier_data: Dict):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∑ –∞–≥—Ä–µ–≥–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏"""
        profile = self.create_profile_from_vector(supplier_data)
        self.profiles[edrpou] = profile

    def get_all_profiles(self) -> Dict[str, SupplierProfile]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ–≤"""
        return self.profiles

    def export_state(self) -> Dict[str, Any]:
        """–ï–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞–Ω—É –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞"""
        return {
            'profiles': {
                edrpou: profile.to_dict() 
                for edrpou, profile in self.profiles.items()
            },
            'market_benchmarks': self.market_benchmarks
        }

    def load_state(self, state_data: Dict[str, Any]):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞"""
        # –û—á–∏—â–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
        self.profiles.clear()
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
        profiles_data = state_data.get('profiles', {})
        for edrpou, profile_data in profiles_data.items():
            # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
            profile = SupplierProfile(
                edrpou=edrpou,
                name=profile_data.get('name', '')
            )
            
            # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫
            metrics_data = profile_data.get('metrics', {})
            for key, value in metrics_data.items():
                setattr(profile.metrics, key, value)
            
            # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—à–∏—Ö –ø–æ–ª—ñ–≤
            profile.categories = profile_data.get('categories', {})
            profile.industries = profile_data.get('industries', {})
            profile.cpv_experience = profile_data.get('cpv_experience', {})
            profile.brand_expertise = profile_data.get('brand_expertise', [])
            profile.competitive_advantages = profile_data.get('competitive_advantages', [])
            profile.weaknesses = profile_data.get('weaknesses', [])
            profile.market_position = profile_data.get('market_position', 'unknown')
            profile.reliability_score = profile_data.get('reliability_score', 0.0)
            
            self.profiles[edrpou] = profile
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–µ–Ω—á–º–∞—Ä–∫—ñ–≤
        self.market_benchmarks = state_data.get('market_benchmarks', {})
        
        self.logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.profiles)} –ø—Ä–æ—Ñ—ñ–ª—ñ–≤")

    
    def create_profile(self, edrpou, items):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞"""
        if not items:
            return None
        
        # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–∏—Ö
        self.logger.debug(f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è {edrpou} –∑ {len(items)} –∑–∞–ø–∏—Å—ñ–≤")
        
        # –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è - –ü–ï–†–ï–í–Ü–†–Ø–Ñ–ú–û –†–Ü–ó–ù–Ü –ü–û–õ–Ø
        first_item = items[0]
        
        # –í–∏—Ç—è–≥—É—î–º–æ –Ñ–î–†–ü–û–£ –∑ —Ä—ñ–∑–Ω–∏—Ö –º–æ–∂–ª–∏–≤–∏—Ö –ø–æ–ª—ñ–≤
        actual_edrpou = (
            edrpou or  # –ü–µ—Ä–µ–¥–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            first_item.get('edrpou') or 
            first_item.get('EDRPOU') or
            ''
        )
        
        # –í–∏—Ç—è–≥—É—î–º–æ –Ω–∞–∑–≤—É –∑ —Ä—ñ–∑–Ω–∏—Ö –º–æ–∂–ª–∏–≤–∏—Ö –ø–æ–ª—ñ–≤
        name = (
            first_item.get('supplier_name') or 
            first_item.get('supp_name') or
            first_item.get('name') or
            first_item.get('SUPP_NAME') or
            f'–ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫ {actual_edrpou}'  # Fallback
        )
        
        self.logger.debug(f"–ó–Ω–∞–π–¥–µ–Ω–æ: –Ñ–î–†–ü–û–£={actual_edrpou}, –ù–∞–∑–≤–∞={name}")
        
        profile = SupplierProfile(edrpou=actual_edrpou, name=name)
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫
        self._calculate_metrics(profile, items)
        self._analyze_categories(profile, items)
        self._analyze_industries(profile, items)
        self._analyze_cpv_experience(profile, items)
        self._analyze_brand_expertise(profile, items)
        self._determine_market_position(profile)
        self._identify_strengths_weaknesses(profile)
        self._calculate_reliability_score(profile, items)
        self._analyze_risk_indicators(profile, items)
        
        return profile

    
    def _calculate_metrics(self, profile: SupplierProfile, data: List[Dict]):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—Å–Ω–æ–≤–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫"""
        metrics = profile.metrics

        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –±–∞–∑–æ–≤–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤
        tender_numbers = set()
        won_tender_numbers = set()

        for item in data:
            # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –ø–æ–ª—ñ–≤
            tender_num = (
                item.get('tender_number') or 
                item.get('F_TENDERNUMBER') or
                item.get('TENDER_NUMBER') or
                ''
            )
            
            if tender_num:
                tender_numbers.add(tender_num)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –ø–æ–ª—è WON
                is_won = (
                    item.get('won') or 
                    item.get('WON') or
                    False
                )
                
                if is_won:
                    won_tender_numbers.add(tender_num)

            metrics.total_positions += 1
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –ø–æ–ª—è WON
            if item.get('won') or item.get('WON'):
                metrics.won_positions += 1

        metrics.total_tenders = len(tender_numbers)
        metrics.won_tenders = len(won_tender_numbers)

        # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        self.logger.debug(f"–ú–µ—Ç—Ä–∏–∫–∏: —Ç–µ–Ω–¥–µ—Ä—ñ–≤={metrics.total_tenders}, –≤–∏–≥—Ä–∞–Ω–æ={metrics.won_tenders}, "
                        f"–ø–æ–∑–∏—Ü—ñ–π={metrics.total_positions}, –≤–∏–≥—Ä–∞–Ω–æ –ø–æ–∑–∏—Ü—ñ–π={metrics.won_positions}")

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ win rates
        if metrics.total_tenders > 0:
            metrics.win_rate = metrics.won_tenders / metrics.total_tenders

        if metrics.total_positions > 0:
            metrics.position_win_rate = metrics.won_positions / metrics.total_positions

        # Recent performance (–æ—Å—Ç–∞–Ω–Ω—ñ 180 –¥–Ω—ñ–≤)
        self._calculate_recent_performance(profile, data)

        # Growth rate
        self._calculate_growth_rate(profile, data)

        # Stability score
        self._calculate_stability_score(profile, data)

    
    def _calculate_recent_performance(self, profile: SupplierProfile, data: List[Dict]):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–µ–¥–∞–≤–Ω—å–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–∑–∞ 180 –¥–Ω—ñ–≤)"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç
            dated_items = []
            for item in data:
                # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –ø–æ–ª—ñ–≤ –¥–∞—Ç–∏
                date_str = (
                    item.get('date_end') or
                    item.get('DATEEND') or
                    item.get('DATE_END') or
                    ''
                )
                
                if date_str:
                    try:
                        # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –¥–∞—Ç
                        for fmt in ['%d.%m.%Y', '%Y-%m-%d', '%Y-%m-%dT%H:%M:%S']:
                            try:
                                date = datetime.strptime(date_str.split('T')[0], fmt)
                                dated_items.append((date, item))
                                break
                            except:
                                continue
                    except:
                        pass
        
            if not dated_items:
                return
            
            dated_items.sort(key=lambda x: x[0], reverse=True)
            latest_date = dated_items[0][0]
            cutoff_date = latest_date - timedelta(days=180)
            
            # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –Ω–µ–¥–∞–≤–Ω—ñ—Ö –ø–æ–∑–∏—Ü—ñ–π
            recent_items = [item for date, item in dated_items if date >= cutoff_date]
            
            if recent_items:
                recent_won = sum(1 for item in recent_items if (item.get('won') or item.get('WON')))
                profile.metrics.recent_win_rate = recent_won / len(recent_items)
            
        except Exception as e:
            self.logger.error(f"Error calculating recent performance: {e}")

    
    def _calculate_growth_rate(self, profile: SupplierProfile, data: List[Dict]):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç–µ–º–ø—É –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è"""
        try:
            # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞—Ö
            quarterly_data = defaultdict(lambda: {'total': 0, 'won': 0})
            
            for item in data:
                date_str = item.get('DATEEND') or item.get('date_end')
                if date_str:
                    try:
                        date = datetime.strptime(date_str, "%d.%m.%Y")
                        quarter_key = f"{date.year}-Q{(date.month - 1) // 3 + 1}"
                        
                        quarterly_data[quarter_key]['total'] += 1
                        if (item.get('WON') or item.get('won')):
                            quarterly_data[quarter_key]['won'] += 1
                    except:
                        pass
            
            if len(quarterly_data) >= 2:
                quarters = sorted(quarterly_data.keys())
                
                # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ç–∞ –ø–µ—Ä–µ–¥–æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª—ñ–≤
                last_quarter = quarterly_data[quarters[-1]]
                prev_quarter = quarterly_data[quarters[-2]]
                
                if prev_quarter['total'] > 0:
                    growth = (last_quarter['total'] - prev_quarter['total']) / prev_quarter['total']
                    profile.metrics.growth_rate = growth
            
        except Exception as e:
            self.logger.error(f"Error calculating growth rate: {e}")
    
    def _calculate_stability_score(self, profile: SupplierProfile, data: List[Dict]):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞"""
        try:
            # –§–∞–∫—Ç–æ—Ä–∏ —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
            factors = []
            
            # 1. –°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å win rate –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞—Ö
            quarterly_win_rates = []
            quarterly_data = defaultdict(lambda: {'total': 0, 'won': 0})
            42934830
            for item in data:
                date_str = (item.get('DATEEND') or 
                            item.get('date_end')) 
                if date_str:
                    try:
                        date = datetime.strptime(date_str, "%d.%m.%Y")
                        quarter_key = f"{date.year}-Q{(date.month - 1) // 3 + 1}"
                        
                        quarterly_data[quarter_key]['total'] += 1
                        if item.get('WON') or item.get('won'):
                            quarterly_data[quarter_key]['won'] += 1
                    except:
                        pass
            
            for quarter_data in quarterly_data.values():
                if quarter_data['total'] > 0:
                    win_rate = quarter_data['won']  / quarter_data['total']
                    quarterly_win_rates.append(win_rate)
            
            if len(quarterly_win_rates) >= 2:
                # –ù–∏–∑—å–∫–∞ –≤–∞—Ä—ñ–∞—Ü—ñ—è = –≤–∏—Å–æ–∫–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å
                variance = np.var(quarterly_win_rates)
                stability_from_variance = 1.0 - min(variance * 10, 1.0)
                factors.append(stability_from_variance)
            
            # 2. –†–µ–≥—É–ª—è—Ä–Ω—ñ—Å—Ç—å —É—á–∞—Å—Ç—ñ
            if len(quarterly_data) >= 4:
                participation_regularity = len(quarterly_data) / 4  # –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –¥–æ —Ä–æ–∫—É
                factors.append(min(participation_regularity, 1.0))
            
            # 3. –î–æ—Å–≤—ñ–¥ (–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ–Ω–¥–µ—Ä—ñ–≤)
            experience_factor = min(profile.metrics.total_tenders / 50, 1.0)
            factors.append(experience_factor)
            
            # –ó–∞–≥–∞–ª—å–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
            if factors:
                profile.metrics.stability_score = np.mean(factors)
            
        except Exception as e:
            self.logger.error(f"Error calculating stability score: {e}")
    
    def _analyze_categories(self, profile, items):
        """–ê–Ω–∞–ª—ñ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞"""
        category_stats = defaultdict(lambda: {
            'total': 0, 'won': 0, 'revenue': 0.0,
            'items': [], 'win_rate': 0.0
        })
        
        for item in items:
            # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ –Ω–∞ —Å–ø–∏—Å–æ–∫
            category = (item.get('industry') or item.get('F_INDUSTRYNAME'))
            nomenclature = item.get('item_name', '') 
            if not category:
                categories = ['unknown']
            else:
                # –Ø–∫—â–æ —Ü–µ —Ä—è–¥–æ–∫ - —Ä–æ–±–∏–º–æ —Å–ø–∏—Å–æ–∫ –∑ –æ–¥–Ω–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º
                categories = [category]

            for category in categories:
                stats = category_stats[category]
                stats['total'] += 1
                stats['items'].append(nomenclature)  # –î–æ–¥–∞—î–º–æ –Ω–∞–∑–≤—É –ø–æ–∑–∏—Ü—ñ—ó

                if (item.get('won') or item.get('WON')):
                    stats['won'] += 1
                    try:
                        budget = float(item.get('budget') or item.get('ITEM_BUDGET'))*float(item.get('currency_rate') or item.get('F_TENDERCURRENCYRATE'))
                        stats['revenue'] += budget
                    except:
                        pass
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ win rate —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        total_positions = sum(stats['total'] for stats in category_stats.values())
        
        for category, stats in category_stats.items():
            if stats['total'] > 0:
                stats['win_rate'] = stats['won'] / stats['total']
                stats['specialization'] = stats['total'] / total_positions
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–æ–ø-5 —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó –ø–∞–º'—è—Ç—ñ
                stats['top_items'] = list(set(stats['items']))[:5]
                del stats['items']
        
        profile.categories = dict(category_stats)
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó (HHI –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π)
        if profile.categories:
            shares = [stats['specialization'] for stats in profile.categories.values()]
            profile.metrics.specialization_score = sum(s**2 for s in shares)

    
    def _analyze_industries(self, profile: SupplierProfile, data: List[Dict]):
        """–ê–Ω–∞–ª—ñ–∑ —ñ–Ω–¥—É—Å—Ç—Ä—ñ–π –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞"""
        industry_stats = defaultdict(lambda: {
            'total': 0, 'won': 0, 'revenue': 0.0, 'win_rate': 0.0
        })
        
        for item in data:
            industry = item.get('F_INDUSTRYNAME', 'unknown')
            stats = industry_stats[industry]
            stats['total'] += 1
            
            if item.get('won'):
                stats['won'] += 1
                try:
                    budget = float(item.get('budget', 0))
                    stats['revenue'] += budget
                except:
                    pass
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ win rate
        for industry, stats in industry_stats.items():
            if stats['total'] > 0:
                stats['win_rate'] = stats['won'] / stats['total']
        
        profile.industries = dict(industry_stats)
    
    def _analyze_cpv_experience(self, profile: SupplierProfile, data: List[Dict]):
        """–ê–Ω–∞–ª—ñ–∑ –¥–æ—Å–≤—ñ–¥—É –∑ CPV –∫–æ–¥–∞–º–∏"""
        cpv_stats = defaultdict(lambda: {
            'total': 0, 'won': 0, 'win_rate': 0.0,
            'categories': set()
        })
        
        for item in data:
            cpv = item.get('CPV', '')
            if not cpv:
                cpv = item.get('cpv')
            if cpv and cpv != 0:
                cpv_str = str(cpv)
                stats = cpv_stats[cpv_str]
                stats['total'] += 1

                if (item.get('won') or item.get('WON')): 
                    stats['won'] += 1
                
            #     # –î–æ–¥–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            #     item_name = (item.get('item_name',) or 
            #                  item.get('F_ITEMNAME', ''))
            #     if self.categories_manager:
            #         categories = self.categories_manager.categorize_item(item_name)
            #         stats['categories'].update(categories)
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ win rate —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è sets –≤ lists
        for cpv, stats in cpv_stats.items():
            if stats['total'] > 0:
                stats['win_rate'] = stats['won'] / stats['total']
            stats['categories'] = list(stats['categories'])
        
        profile.cpv_experience = dict(cpv_stats)
    
    def _analyze_brand_expertise(self, profile: SupplierProfile, data: List[Dict]):
        """–ê–Ω–∞–ª—ñ–∑ –¥–æ—Å–≤—ñ–¥—É –∑ –±—Ä–µ–Ω–¥–∞–º–∏"""
        brand_counter = Counter()
        
        for item in data:
            item_name = item.get('F_ITEMNAME', '') or item.get('item_name', '')
            if item_name and (item.get('WON') or item.get('won')):
                for brand, pattern in self.brand_patterns.items():
                    if pattern.search(item_name):
                        brand_counter[brand] += 1
        
        # –¢–æ–ø –±—Ä–µ–Ω–¥–∏
        profile.brand_expertise = [brand for brand, _ in brand_counter.most_common(10)]
    
    def _determine_market_position(self, profile: SupplierProfile):
        """–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ —Ä–∏–Ω–∫—É"""
        metrics = profile.metrics
        
        # –ö—Ä–∏—Ç–µ—Ä—ñ—ó –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
        if metrics.total_tenders >= 50 and metrics.win_rate >= 0.3:
            profile.market_position = "established_player"
        elif metrics.total_tenders >= 20:
            if metrics.win_rate >= 0.2:
                profile.market_position = "competitive_player"
            else:
                profile.market_position = "active_participant"
        elif metrics.total_tenders >= 5:
            profile.market_position = "emerging_player"
        else:
            profile.market_position = "new_entrant"
    
    def _identify_strengths_weaknesses(self, profile: SupplierProfile):
        """–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Å–∏–ª—å–Ω–∏—Ö —Ç–∞ —Å–ª–∞–±–∫–∏—Ö —Å—Ç–æ—Ä—ñ–Ω"""
        strengths = []
        weaknesses = []
        metrics = profile.metrics
        
        # –°–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏
        if metrics.win_rate >= 0.3:
            strengths.append("–í–∏—Å–æ–∫–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥")
        
        if metrics.stability_score >= 0.7:
            strengths.append("–°—Ç–∞–±—ñ–ª—å–Ω–∞ –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å")
        
        if metrics.specialization_score >= 0.5:
            strengths.append("–ß—ñ—Ç–∫–∞ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è")
        
        if profile.brand_expertise:
            strengths.append(f"–î–æ—Å–≤—ñ–¥ –∑ –±—Ä–µ–Ω–¥–∞–º–∏: {', '.join(profile.brand_expertise[:3])}")
        
        if metrics.recent_win_rate > metrics.win_rate * 1.2:
            strengths.append("–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
        
        # –°–ª–∞–±–∫—ñ —Å—Ç–æ—Ä–æ–Ω–∏
        if metrics.win_rate < 0.1:
            weaknesses.append("–ù–∏–∑—å–∫–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥")
        
        if metrics.growth_rate < -0.2:
            weaknesses.append("–ó–Ω–∏–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
        
        if metrics.specialization_score < 0.2:
            weaknesses.append("–í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —á—ñ—Ç–∫–æ—ó —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó")
        
        if metrics.recent_win_rate < metrics.win_rate * 0.8:
            weaknesses.append("–ü–æ–≥—ñ—Ä—à–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
        
        profile.competitive_advantages = strengths
        profile.weaknesses = weaknesses
    
    def _calculate_reliability_score(self, profile: SupplierProfile, data: List[Dict]):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–∫–∞–∑–Ω–∏–∫–∞ –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ"""
        factors = []

        # 1. –î–æ—Å–≤—ñ–¥ (–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ–Ω–¥–µ—Ä—ñ–≤)
        experience_score = min(profile.metrics.total_tenders / 100, 1.0)
        factors.append(experience_score * 0.3)

        # 2. Win rate
        win_rate_score = min(profile.metrics.win_rate * 2, 1.0)
        factors.append(win_rate_score * 0.3)

        # 3. –°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å
        factors.append(profile.metrics.stability_score * 0.2)

        profile.reliability_score = sum(factors)

    def _analyze_risk_indicators(self, profile: SupplierProfile, data: List[Dict]):
        """–ê–Ω–∞–ª—ñ–∑ —Ä–∏–∑–∏–∫-—ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é"""
        risk_indicators = {}
        
        # 1. –†–∞–Ω–Ω—ñ–π –ø–æ–ø–µ—Ä–µ–¥–∂—É–≤–∞–ª—å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä (–ø–∞–¥—ñ–Ω–Ω—è win rate)
        early_warning = self._check_early_warning_indicator(profile, data)
        if early_warning:
            risk_indicators['early_warning'] = early_warning
        
        # 2. –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π —Ä–∏–∑–∏–∫ (–∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –≤—ñ–¥ –æ–¥–Ω–æ–≥–æ –∑–∞–º–æ–≤–Ω–∏–∫–∞)
        concentration_risk = self._check_concentration_risk(data)
        if concentration_risk:
            risk_indicators['concentration_risk'] = concentration_risk
        
        # 3. –†–∏–∑–∏–∫ –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è
        disappearance_risk = self._check_disappearance_risk(data)
        if disappearance_risk:
            risk_indicators['disappearance_risk'] = disappearance_risk
        
        # –î–æ–¥–∞—î–º–æ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é
        if risk_indicators:
            profile.risk_indicators = risk_indicators
            profile.has_risks = True
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å —Ä–∏–∑–∏–∫—É
            risk_levels = [r.get('level', 'low') for r in risk_indicators.values()]
            if 'critical' in risk_levels:
                profile.overall_risk_level = 'critical'
            elif 'high' in risk_levels:
                profile.overall_risk_level = 'high'
            elif 'medium' in risk_levels:
                profile.overall_risk_level = 'medium'
            else:
                profile.overall_risk_level = 'low'
        else:
            profile.has_risks = False
            profile.overall_risk_level = 'low'

    def _check_early_warning_indicator(self, profile: SupplierProfile, data: List[Dict]):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—ñ–∑–∫–æ–≥–æ –ø–∞–¥—ñ–Ω–Ω—è win rate"""
        # –ì—Ä—É–ø—É—î–º–æ –¥–∞–Ω—ñ –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞—Ö
        quarterly_data = defaultdict(lambda: {'total': 0, 'won': 0})
        
        for item in data:
            date_str = item.get('DATEEND') or item.get('date_end')
            if date_str:
                try:
                    date = datetime.strptime(date_str, "%d.%m.%Y")
                    quarter_key = f"{date.year}-Q{(date.month - 1) // 3 + 1}"
                    quarterly_data[quarter_key]['total'] += 1
                    if item.get('WON') or item.get('won'):
                        quarterly_data[quarter_key]['won'] += 1
                except:
                    pass
        
        if len(quarterly_data) < 2:
            return None
        
        # –°–æ—Ä—Ç—É—î–º–æ –∫–≤–∞—Ä—Ç–∞–ª–∏
        sorted_quarters = sorted(quarterly_data.keys())
        
        # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 2 –∫–≤–∞—Ä—Ç–∞–ª–∏
        current_q = sorted_quarters[-1]
        previous_q = sorted_quarters[-2]
        
        current_data = quarterly_data[current_q]
        previous_data = quarterly_data[previous_q]
        
        if current_data['total'] > 0 and previous_data['total'] > 0:
            current_wr = current_data['won'] / current_data['total']
            previous_wr = previous_data['won'] / previous_data['total']
            
            if previous_wr > 0:
                decline = (previous_wr - current_wr) / previous_wr
                
                if decline > 0.3:  # –ü–∞–¥—ñ–Ω–Ω—è –±—ñ–ª—å—à–µ 30%
                    return {
                        'level': 'high',
                        'message': f'–†—ñ–∑–∫–µ –ø–∞–¥—ñ–Ω–Ω—è win rate –∑ {previous_wr:.1%} –¥–æ {current_wr:.1%} (-{decline:.1%})',
                        'previous_quarter': previous_q,
                        'current_quarter': current_q,
                        'previous_win_rate': previous_wr,
                        'current_win_rate': current_wr,
                        'decline_percentage': decline
                    }
        
        return None  

    def _check_concentration_risk(self, data: List[Dict]):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –æ–¥–Ω–æ–≥–æ –∑–∞–º–æ–≤–Ω–∏–∫–∞"""
        owner_counts = defaultdict(int)
        total_positions = len(data)
        
        for item in data:
            owner = item.get('OWNER_NAME') or item.get('owner_name')
            if owner:
                owner_counts[owner] += 1
        
        if not owner_counts or total_positions == 0:
            return None
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–æ–ø–æ–≤–æ–≥–æ –∑–∞–º–æ–≤–Ω–∏–∫–∞
        top_owner, top_count = max(owner_counts.items(), key=lambda x: x[1])
        concentration = top_count / total_positions
        
        if concentration >= 0.75:  # 75% –∞–±–æ –±—ñ–ª—å—à–µ
            return {
                'level': 'high',
                'message': f'–ö—Ä–∏—Ç–∏—á–Ω–∞ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –≤—ñ–¥ –∑–∞–º–æ–≤–Ω–∏–∫–∞ "{top_owner}": {concentration:.1%} –≤—Å—ñ—Ö —Ç–µ–Ω–¥–µ—Ä—ñ–≤',
                'dominant_owner': top_owner,
                'concentration_percentage': concentration,
                'positions_count': top_count,
                'total_positions': total_positions,
                'other_owners': len(owner_counts) - 1
            }
        
        return None
      
    def _check_disappearance_risk(self, data: List[Dict]):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–∏–∑–∏–∫—É –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è (—Ä—ñ–∑–∫–µ –∑–Ω–∏–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ)"""
        # –ì—Ä—É–ø—É—î–º–æ –ø–æ —Ä–æ–∫–∞—Ö
        yearly_activity = defaultdict(int)
        latest_date = None
        
        for item in data:
            date_str = item.get('DATEEND') or item.get('date_end')
            if date_str:
                try:
                    date = datetime.strptime(date_str, "%d.%m.%Y")
                    year = date.year
                    yearly_activity[year] += 1
                    
                    if latest_date is None or date > latest_date:
                        latest_date = date
                except:
                    pass
        
        if len(yearly_activity) < 2:
            return None
        
        # –°–æ—Ä—Ç—É—î–º–æ —Ä–æ–∫–∏
        sorted_years = sorted(yearly_activity.keys())
        
        # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 2 —Ä–æ–∫–∏
        if len(sorted_years) >= 2:
            current_year = sorted_years[-1]
            previous_year = sorted_years[-2]
            
            current_activity = yearly_activity[current_year]
            previous_activity = yearly_activity[previous_year]
            
            if previous_activity > 0:
                decline = (previous_activity - current_activity) / previous_activity
                
                if decline > 0.7:  # –ü–∞–¥—ñ–Ω–Ω—è –±—ñ–ª—å—à–µ 70%
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–∞–≤–Ω–æ –æ—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                    days_since_last = (datetime.now() - latest_date).days if latest_date else 999
                    
                    if days_since_last > 180:  # –ë—ñ–ª—å—à–µ 6 –º—ñ—Å—è—Ü—ñ–≤
                        return {
                            'level': 'critical',
                            'message': f'–ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫ –∑–Ω–∏–∫–∞—î! –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–ø–∞–ª–∞ –∑ {previous_activity} –¥–æ {current_activity} –ø–æ–∑–∏—Ü—ñ–π/—Ä—ñ–∫. –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å {days_since_last} –¥–Ω—ñ–≤ —Ç–æ–º—É',
                            'previous_year': previous_year,
                            'current_year': current_year,
                            'previous_activity': previous_activity,
                            'current_activity': current_activity,
                            'last_activity_date': latest_date.strftime('%d.%m.%Y') if latest_date else '–ù–µ–≤—ñ–¥–æ–º–æ',
                            'days_inactive': days_since_last
                        }
                    else:
                        return {
                            'level': 'medium',
                            'message': f'–†—ñ–∑–∫–µ –∑–Ω–∏–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑ {previous_activity} –¥–æ {current_activity} –ø–æ–∑–∏—Ü—ñ–π/—Ä—ñ–∫ (-{decline:.1%})',
                            'previous_year': previous_year,
                            'current_year': current_year,
                            'decline_percentage': decline
                        }
        
        return None


    
    def update_profile(self, edrpou: str, new_data: List[Dict]):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –Ω–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏"""
        if edrpou in self.profiles:
            # –û–±'—î–¥–Ω—É—î–º–æ –∑ —ñ—Å–Ω—É—é—á–∏–º–∏ –¥–∞–Ω–∏–º–∏
            existing_profile = self.profiles[edrpou]
            existing_profile.profile_version += 1
            existing_profile.last_updated = datetime.now().isoformat()
            
            # –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∑ —É—Å—ñ–º–∞ –¥–∞–Ω–∏–º–∏
            # (–≤ —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ —Ç—É—Ç –±—É–≤ –±–∏ –±—ñ–ª—å—à –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥)
            updated_profile = self.create_profile(new_data)
            self.profiles[edrpou] = updated_profile
        else:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
            profile = self.create_profile(new_data)
            if profile:
                self.profiles[edrpou] = profile
    
    def get_profile(self, edrpou: str) -> Optional[SupplierProfile]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞"""
        return self.profiles.get(edrpou)
    
    def get_similar_suppliers(self, edrpou: str, top_k: int = 5) -> List[Tuple[str, float]]:
        """–ü–æ—à—É–∫ —Å—Ö–æ–∂–∏—Ö –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤"""
        target_profile = self.profiles.get(edrpou)
        if not target_profile:
            return []
        
        similarities = []
        
        for other_edrpou, other_profile in self.profiles.items():
            if other_edrpou == edrpou:
                continue
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ö–æ–∂–æ—Å—Ç—ñ
            similarity = self._calculate_profile_similarity(target_profile, other_profile)
            similarities.append((other_edrpou, similarity))
        
        # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —Å—Ö–æ–∂—ñ—Å—Ç—é
        similarities.sort(key=lambda x: x[1], reverse=True)
        
        return similarities[:top_k]
    
    def _calculate_profile_similarity(self, profile1: SupplierProfile, profile2: SupplierProfile) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ö–æ–∂–æ—Å—Ç—ñ –¥–≤–æ—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ–≤"""
        similarity_scores = []
        
        # 1. –°—Ö–æ–∂—ñ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        cats1 = set(profile1.categories.keys())
        cats2 = set(profile2.categories.keys())
        if cats1 or cats2:
            category_similarity = len(cats1.intersection(cats2)) / len(cats1.union(cats2))
            similarity_scores.append(category_similarity)
        
        # 2. –°—Ö–æ–∂—ñ—Å—Ç—å —ñ–Ω–¥—É—Å—Ç—Ä—ñ–π
        ind1 = set(profile1.industries.keys())
        ind2 = set(profile2.industries.keys())
        if ind1 or ind2:
            industry_similarity = len(ind1.intersection(ind2)) / len(ind1.union(ind2))
            similarity_scores.append(industry_similarity)
        
        # 3. –°—Ö–æ–∂—ñ—Å—Ç—å –º–µ—Ç—Ä–∏–∫
        metric_diff = abs(profile1.metrics.win_rate - profile2.metrics.win_rate)
        metric_similarity = 1.0 - min(metric_diff * 2, 1.0)
        similarity_scores.append(metric_similarity)
        
        # 4. –°—Ö–æ–∂—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ —Ä–∏–Ω–∫—É
        if profile1.market_position == profile2.market_position:
            similarity_scores.append(1.0)
        else:
            similarity_scores.append(0.5)
        
        return np.mean(similarity_scores) if similarity_scores else 0.0
    
    def get_market_benchmarks(self, category: str = None) -> Dict[str, float]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –±–µ–Ω—á–º–∞—Ä–∫—ñ–≤"""
        if category:
            # –ë–µ–Ω—á–º–∞—Ä–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            category_profiles = [
                p for p in self.profiles.values()
                if category in p.categories
            ]
        else:
            # –ó–∞–≥–∞–ª—å–Ω—ñ –±–µ–Ω—á–º–∞—Ä–∫–∏
            category_profiles = list(self.profiles.values())

        if not category_profiles:
            return {}

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–µ–Ω—á–º–∞—Ä–∫—ñ–≤
        win_rates = [p.metrics.win_rate for p in category_profiles]
        positions = [p.metrics.total_positions for p in category_profiles]

        benchmarks = {
            'avg_win_rate': np.mean(win_rates),
            'median_win_rate': np.median(win_rates),
            'top_quartile_win_rate': np.percentile(win_rates, 75),
            'avg_positions': np.mean(positions),
            'total_suppliers': len(category_profiles)
        }

        return benchmarks
    
    def save_profiles(self, filepath: str):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤"""
        profiles_data = {
            edrpou: profile.to_dict()
            for edrpou, profile in self.profiles.items()
        }
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(profiles_data, f, ensure_ascii=False, indent=2)
        
        self.logger.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(profiles_data)} –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤")
    
    def load_profiles(self, filepath: str):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—ñ–∑–Ω–∏—Ö –≤–µ—Ä—Å—ñ–π —Ñ–∞–π–ª—É
            if not Path(filepath).exists():
                # –°–ø—Ä–æ–±—É—î–º–æ —Ñ–∞–π–ª –∑ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏
                clusters_file = filepath.replace('.json', '_with_clusters.json')
                if Path(clusters_file).exists():
                    filepath = clusters_file
                    self.logger.info(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ–∞–π–ª –∑ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏: {filepath}")
            
            with open(filepath, 'r', encoding='utf-8') as f:
                profiles_data = json.load(f)
            
            self.profiles = {}
            for edrpou, data in profiles_data.items():
                # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∑ –¥–∞–Ω–∏—Ö
                profile = SupplierProfile(
                    edrpou=edrpou,
                    name=data.get('name', '')
                )
                
                # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫
                metrics_data = data.get('metrics', {})
                for key, value in metrics_data.items():
                    setattr(profile.metrics, key, value)
                
                # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—à–∏—Ö –ø–æ–ª—ñ–≤
                profile.categories = data.get('categories', {})
                profile.industries = data.get('industries', {})
                profile.cpv_experience = data.get('cpv_experience', {})
                profile.brand_expertise = data.get('brand_expertise', [])
                profile.competitive_advantages = data.get('competitive_advantages', [])
                profile.weaknesses = data.get('weaknesses', [])
                profile.market_position = data.get('market_position', 'unknown')
                profile.reliability_score = data.get('reliability_score', 0.0)
                profile.profile_version = data.get('profile_version', 1)
                profile.last_updated = data.get('last_updated', '')
                
                self.profiles[edrpou] = profile
            
            self.logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.profiles)} –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤")
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤: {e}")