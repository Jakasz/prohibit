"""
–°–ø—Ä–æ—â–µ–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è —Ç–µ–Ω–¥–µ—Ä—ñ–≤
"""
import json
from typing import List, Dict, Optional, Tuple, Any
from datetime import datetime
from pathlib import Path

class SimpleTenderPredictor:
    """–ü—Ä–æ—Å—Ç–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è"""
    
    def __init__(self, system_path: str = "tender_system_improved.pkl"):
        """
        Args:
            system_path: —à–ª—è—Ö –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
        """
        print("üöÄ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏...")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏
        from tender_analysis_system import TenderAnalysisSystem
        
        self.system = TenderAnalysisSystem()
        
        if Path(system_path).exists():
            self.system.load_system(system_path)
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
        else:
            print("‚ö†Ô∏è –ó–±–µ—Ä–µ–∂–µ–Ω—É —Å–∏—Å—Ç–µ–º—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–æ–≤–æ—ó...")
            self.system.initialize_system()
            # –¢—É—Ç –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –Ω–∞—Ç—Ä–µ–Ω—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—å
            raise RuntimeError("–ü–æ—Ç—Ä—ñ–±–Ω–æ —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç—Ä–µ–Ω—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—å!")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ
        if not self.system.is_trained:
            raise RuntimeError("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω–∞!")
            
    def prepare_input_data(self, simplified_data: List[Dict]) -> List[Dict]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Å–ø—Ä–æ—â–µ–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É –≤ –ø–æ–≤–Ω–∏–π
        
        Args:
            simplified_data: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∑ –ø–æ–ª—è–º–∏:
                - edrpou: –∫–æ–¥ –Ñ–î–†–ü–û–£
                - tender_name: –Ω–∞–∑–≤–∞ —Ç–µ–Ω–¥–µ—Ä–∞
                - item_name: –Ω–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É/–ø–æ—Å–ª—É–≥–∏
                - industry_name: –Ω–∞–∑–≤–∞ –≥–∞–ª—É–∑—ñ
                - cpv: –∫–æ–¥ CPV (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
                - budget: –±—é–¥–∂–µ—Ç (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        """
        full_data = []
        
        for idx, item in enumerate(simplified_data):
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
            full_item = {
                'F_TENDERNUMBER': f"TEMP_{idx}_{datetime.now().strftime('%Y%m%d')}",
                'EDRPOU': str(item.get('edrpou', '')),
                'F_TENDERNAME': item.get('tender_name', ''),
                'F_ITEMNAME': item.get('item_name', ''),
                'F_INDUSTRYNAME': item.get('industry_name', ''),
                'CPV': item.get('cpv', 0),
                'ITEM_BUDGET': float(item.get('budget', 0)) if item.get('budget') else 0,
                'DATEEND': datetime.now().strftime('%d.%m.%Y'),
                'WON': False  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            }
            
            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è —è–∫—â–æ —î
            if 'supplier_name' in item:
                full_item['supp_name'] = item['supplier_name']
            
            full_data.append(full_item)
            
        return full_data
    
    def predict_batch(self, 
                     input_data: List[Dict], 
                     threshold: float = 0.6,
                     include_all: bool = False) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –¥–ª—è –±–∞—Ç—á—É —Ç–µ–Ω–¥–µ—Ä—ñ–≤
        
        Args:
            input_data: —Å–ø–∏—Å–æ–∫ —Ç–µ–Ω–¥–µ—Ä—ñ–≤ —É —Å–ø—Ä–æ—â–µ–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
            threshold: –ø–æ—Ä—ñ–≥ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ (0.6 = 60%)
            include_all: —è–∫—â–æ True, –ø–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ—Ä–æ–≥—É
            
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
        """
        print(f"\nüîÆ –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –¥–ª—è {len(input_data)} —Ç–µ–Ω–¥–µ—Ä—ñ–≤...")
        
        # 1. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
        full_data = self.prepare_input_data(input_data)
        
        # 2. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤
        supplier_profiles = {}
        for item in full_data:
            edrpou = item.get('EDRPOU')
            if edrpou and edrpou not in supplier_profiles:
                profile = self.system.supplier_profiler.get_profile(edrpou)
                if profile:
                    supplier_profiles[edrpou] = profile.to_dict()
        
        # 3. –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
        predictions = self.system.predictor.predict_tender(full_data, supplier_profiles)
        
        # 4. –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        results = {
            'total_items': len(input_data),
            'threshold': threshold,
            'high_probability': [],
            'all_predictions': [],
            'summary': {
                'above_threshold': 0,
                'below_threshold': 0,
                'average_probability': 0
            }
        }
        
        total_prob = 0
        
        for idx, (orig_item, pred) in enumerate(zip(input_data, predictions)):
            # –î–æ–¥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            result_item = {
                'index': idx,
                'edrpou': orig_item.get('edrpou'),
                'tender_name': orig_item.get('tender_name'),
                'item_name': orig_item.get('item_name'),
                'industry': orig_item.get('industry_name'),
                'cpv': orig_item.get('cpv'),
                'probability': pred['probability'],
                'confidence': pred['confidence'],
                'risk_factors': pred.get('risk_factors', [])
            }
            
            total_prob += pred['probability']
            
            # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –ø–æ—Ä–æ–≥–æ–º
            if pred['probability'] >= threshold:
                results['high_probability'].append(result_item)
                results['summary']['above_threshold'] += 1
            else:
                results['summary']['below_threshold'] += 1
            
            # –í—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
            if include_all:
                results['all_predictions'].append(result_item)
        
        # –ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        results['summary']['average_probability'] = total_prob / len(predictions) if predictions else 0
        
        return results
    
    def predict_from_file(self, 
                         file_path: str, 
                         threshold: float = 0.6,
                         output_path: Optional[str] = None) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –∑ —Ñ–∞–π–ª—É JSON –∞–±–æ JSONL
        
        Args:
            file_path: —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑ –¥–∞–Ω–∏–º–∏
            threshold: –ø–æ—Ä—ñ–≥ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ
            output_path: –∫—É–¥–∏ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        """
        print(f"üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ {file_path}")
        
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É —Ñ–∞–π–ª—É
        data = []
        
        if file_path.endswith('.json'):
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
        elif file_path.endswith('.jsonl'):
            with open(file_path, 'r', encoding='utf-8') as f:
                for line in f:
                    data.append(json.loads(line.strip()))
        else:
            raise ValueError("–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ .json —Ç–∞ .jsonl —Ñ–∞–π–ª–∏")
        
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å—ñ–≤")
        
        # –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
        results = self.predict_batch(data, threshold=threshold, include_all=True)
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        if output_path:
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {output_path}")
        
        return results
    
    def print_results(self, results: Dict[str, Any], detailed: bool = False):
        """–ö—Ä–∞—Å–∏–≤–∏–π –≤–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"""
        print("\n" + "="*60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ü–†–û–ì–ù–û–ó–£–í–ê–ù–ù–Ø")
        print("="*60)
        
        summary = results['summary']
        print(f"\nüìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å—å–æ–≥–æ —Ç–µ–Ω–¥–µ—Ä—ñ–≤: {results['total_items']}")
        print(f"   ‚Ä¢ –ü–æ—Ä—ñ–≥: {results['threshold']*100:.0f}%")
        print(f"   ‚Ä¢ –í–∏—â–µ –ø–æ—Ä–æ–≥—É: {summary['above_threshold']} ({summary['above_threshold']/results['total_items']*100:.1f}%)")
        print(f"   ‚Ä¢ –ù–∏–∂—á–µ –ø–æ—Ä–æ–≥—É: {summary['below_threshold']}")
        print(f"   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—è –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å: {summary['average_probability']*100:.1f}%")
        
        if results['high_probability']:
            print(f"\n‚úÖ –¢–µ–Ω–¥–µ—Ä–∏ –∑ –≤–∏—Å–æ–∫–æ—é –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é –ø–µ—Ä–µ–º–æ–≥–∏ (>={results['threshold']*100:.0f}%):")
            print("-"*60)
            
            for item in sorted(results['high_probability'], key=lambda x: x['probability'], reverse=True):
                print(f"\n#{item['index']+1} | –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å: {item['probability']*100:.1f}% ({item['confidence']})")
                print(f"   –Ñ–î–†–ü–û–£: {item['edrpou']}")
                print(f"   –¢–µ–Ω–¥–µ—Ä: {item['tender_name'][:50]}...")
                print(f"   –¢–æ–≤–∞—Ä: {item['item_name'][:50]}...")
                print(f"   –ì–∞–ª—É–∑—å: {item['industry']}")
                
                if item['risk_factors']:
                    print(f"   ‚ö†Ô∏è –†–∏–∑–∏–∫–∏: {', '.join(item['risk_factors'])}")
        
        if detailed and results.get('all_predictions'):
            print(f"\nüìã –í—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
            print("-"*60)
            for item in results['all_predictions']:
                status = "‚úÖ" if item['probability'] >= results['threshold'] else "‚ùå"
                print(f"{status} #{item['index']+1}: {item['probability']*100:.1f}% - {item['item_name'][:40]}...")
        
        print("\n" + "="*60)

# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
def example_usage():
    """–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"""
    
    # 1. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
    test_data = [
        {
            "edrpou": "12345678",
            "tender_name": "–ó–∞–∫—É–ø—ñ–≤–ª—è –∑–∞–ø—á–∞—Å—Ç–∏–Ω –¥–ª—è —Ç—Ä–∞–∫—Ç–æ—Ä—ñ–≤",
            "item_name": "–§—ñ–ª—å—Ç—Ä –ø–∞–ª–∏–≤–Ω–∏–π –¥–ª—è John Deere",
            "industry_name": "–°—ñ–ª—å—Å—å–∫–µ –≥–æ—Å–ø–æ–¥–∞—Ä—Å—Ç–≤–æ",
            "cpv": "16810000",
            "budget": 50000
        },
        {
            "edrpou": "12345678",
            "tender_name": "–ó–∞–∫—É–ø—ñ–≤–ª—è –æ—Ñ—ñ—Å–Ω–æ—ó —Ç–µ—Ö–Ω—ñ–∫–∏",
            "item_name": "–ö–∞—Ä—Ç—Ä–∏–¥–∂—ñ –¥–ª—è –ø—Ä–∏–Ω—Ç–µ—Ä—ñ–≤ HP",
            "industry_name": "–û—Ñ—ñ—Å–Ω–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è",
            "cpv": "30125110"
        },
        # –î–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ —Ç–µ–Ω–¥–µ—Ä—ñ–≤...
    ]
    
    # 2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞
    predictor = SimpleTenderPredictor("tender_system.pkl")
    
    # 3. –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
    results = predictor.predict_batch(
        test_data, 
        threshold=0.6,  # 60%
        include_all=True
    )
    
    # 4. –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    predictor.print_results(results, detailed=True)
    
    # 5. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    with open("predictions_result.json", "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)


if __name__ == "__main__":
    example_usage()