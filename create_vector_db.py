#!/usr/bin/env python3
"""
–ë–µ–∑–ø–µ—á–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏
"""

import logging
from pathlib import Path
from tender_analysis_system import TenderAnalysisSystem
from qdrant_client import QdrantClient
from qdrant_client.http.exceptions import UnexpectedResponse

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def check_collection_exists(host="localhost", port=6333, collection_name="tender_vectors"):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó"""
    try:
        client = QdrantClient(host=host, port=port)
        collections = client.get_collections()
        return any(col.name == collection_name for col in collections.collections)
    except:
        return False

def create_or_update_vector_database(
    jsonl_files: list,
    categories_file: str = "categories.jsonl",
    collection_name: str = "tender_vectors",
    batch_size: int = 1000,
    recreate: bool = False,  # True = –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä—É –±–∞–∑—É
    max_records: int = None
):
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏
    
    Args:
        recreate: True - –≤–∏–¥–∞–ª–∏—Ç–∏ —ñ—Å–Ω—É—é—á—É –±–∞–∑—É —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É
                 False - –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—ñ –∑–∞–ø–∏—Å–∏ –¥–æ —ñ—Å–Ω—É—é—á–æ—ó
    """
    
    print("="*60)
    print("üöÄ –í–ï–ö–¢–û–†–ù–ê –ë–ê–ó–ê –¢–ï–ù–î–ï–†–Ü–í")
    print("="*60)
    
    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó
    collection_exists = check_collection_exists(collection_name=collection_name)
    
    if collection_exists:
        print(f"‚ÑπÔ∏è –ö–æ–ª–µ–∫—Ü—ñ—è '{collection_name}' –≤–∂–µ —ñ—Å–Ω—É—î")
        
        if recreate:
            print("‚ö†Ô∏è –†–µ–∂–∏–º RECREATE: —ñ—Å–Ω—É—é—á–∞ –∫–æ–ª–µ–∫—Ü—ñ—è –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–∞")
            response = input("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/n): ")
            if response.lower() != 'y':
                print("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞")
                return False
            
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó
            client = QdrantClient(host="localhost", port=6333)
            client.delete_collection(collection_name)
            print("üóëÔ∏è –ö–æ–ª–µ–∫—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–∞")
            collection_exists = False
        else:
            print("üìù –†–µ–∂–∏–º UPDATE: –Ω–æ–≤—ñ –∑–∞–ø–∏—Å–∏ –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –¥–æ —ñ—Å–Ω—É—é—á–æ—ó –±–∞–∑–∏")
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            client = QdrantClient(host="localhost", port=6333)
            info = client.get_collection(collection_name)
            print(f"üìä –ü–æ—Ç–æ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –±–∞–∑–∏: {info.points_count:,} –∑–∞–ø–∏—Å—ñ–≤")
    else:
        print(f"üÜï –ö–æ–ª–µ–∫—Ü—ñ—è '{collection_name}' –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞")
    
    # 2. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
    print("\nüì¶ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏...")
    system = TenderAnalysisSystem(
        categories_file=categories_file,
        qdrant_host="localhost",
        qdrant_port=6333
    )
    
    if not system.initialize_system():
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó!")
        return False
    
    # 3. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –∫–æ–ª–µ–∫—Ü—ñ—ó
    if collection_exists and not recreate:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á—É –∫–æ–ª–µ–∫—Ü—ñ—é
        system.vector_db.collection_name = collection_name
    else:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∫–æ–ª–µ–∫—Ü—ñ—é
        system.vector_db = system.vector_db.__class__(
            embedding_model=system.embedding_model,
            qdrant_host="localhost",
            qdrant_port=6333,
            collection_name=collection_name
        )
    
    # 4. –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—ñ–≤
    total_indexed = 0
    total_skipped = 0
    
    for idx, jsonl_file in enumerate(jsonl_files, 1):
        print(f"\nüìÅ –§–∞–π–ª {idx}/{len(jsonl_files)}: {Path(jsonl_file).name}")
        
        if not Path(jsonl_file).exists():
            print(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {jsonl_file}")
            continue
        
        file_size_mb = Path(jsonl_file).stat().st_size / (1024**2)
        print(f"üìä –†–æ–∑–º—ñ—Ä: {file_size_mb:.1f} MB")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        print("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...")
        data = []
        
        with open(jsonl_file, 'r', encoding='utf-8') as f:
            for line_num, line in enumerate(f, 1):
                if max_records and line_num > max_records:
                    print(f"‚èπÔ∏è –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç {max_records} –∑–∞–ø–∏—Å—ñ–≤")
                    break
                    
                try:
                    record = json.loads(line.strip())
                    data.append(record)
                    
                    if len(data) % 10000 == 0:
                        print(f"  –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(data):,} –∑–∞–ø–∏—Å—ñ–≤...")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤ —Ä—è–¥–∫—É {line_num}: {e}")
        
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(data):,} –∑–∞–ø–∏—Å—ñ–≤")
        
        # –Ü–Ω–¥–µ–∫—Å–∞—Ü—ñ—è
        print("üîÑ –Ü–Ω–¥–µ–∫—Å–∞—Ü—ñ—è —É –≤–µ–∫—Ç–æ—Ä–Ω—É –±–∞–∑—É...")
        stats = system.vector_db.index_tenders(
            historical_data=data,
            update_mode=not recreate,  # update_mode=True —è–∫—â–æ –Ω–µ recreate
            batch_size=batch_size
        )
        
        indexed = stats.get('indexed_count', 0)
        skipped = stats.get('skipped_count', 0)
        errors = stats.get('error_count', 0)
        
        total_indexed += indexed
        total_skipped += skipped
        
        print(f"‚úÖ –ü—Ä–æ—ñ–Ω–¥–µ–∫—Å–æ–≤–∞–Ω–æ: {indexed:,}")
        print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª—ñ–∫–∞—Ç–∏): {skipped:,}")
        print(f"‚ùå –ü–æ–º–∏–ª–æ–∫: {errors:,}")
    
    # 5. –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*60)
    print("üìä –ü–Ü–î–°–£–ú–ö–ò:")
    print(f"‚úÖ –ù–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–æ–¥–∞–Ω–æ: {total_indexed:,}")
    print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤: {total_skipped:,}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
    try:
        db_stats = system.vector_db.get_collection_stats()
        print(f"üóÑÔ∏è –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –±–∞–∑–∏: {db_stats['points_count']:,} –∑–∞–ø–∏—Å—ñ–≤")
    except:
        pass
    
    print("="*60)
    
    return True


if __name__ == "__main__":
    import json
    
    # ===== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø =====
    
    # –í–∞—à—ñ —Ñ–∞–π–ª–∏
    FILES = [
        "out_10.jsonl",
        "out_11.jsonl"
        # "path/to/your/second_file.jsonl"
    ]
    
    # –û–ø—Ü—ñ—ó
    COLLECTION_NAME = "tender_vectors"  # –ù–∞–∑–≤–∞ –∫–æ–ª–µ–∫—Ü—ñ—ó
    BATCH_SIZE = 1700
    
    # –í–ê–ñ–õ–ò–í–û: –†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏
    RECREATE_DATABASE = True  # False = –¥–æ–¥–∞—Ç–∏ –¥–æ —ñ—Å–Ω—É—é—á–æ—ó, True = —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É
    
    # –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    MAX_RECORDS = None  # None = –≤—Å—ñ –∑–∞–ø–∏—Å–∏, —á–∏—Å–ª–æ = –æ–±–º–µ–∂–µ–Ω–Ω—è
    
    # ===== –ó–ê–ü–£–°–ö =====
    
    print("üîß –†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏:")
    if RECREATE_DATABASE:
        print("  ‚ö†Ô∏è RECREATE - —ñ—Å–Ω—É—é—á–∞ –±–∞–∑–∞ –±—É–¥–µ –í–ò–î–ê–õ–ï–ù–ê —ñ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –Ω–æ–≤–∞")
    else:
        print("  ‚úÖ UPDATE - –Ω–æ–≤—ñ –∑–∞–ø–∏—Å–∏ –±—É–¥—É—Ç—å –î–û–î–ê–ù–Ü –¥–æ —ñ—Å–Ω—É—é—á–æ—ó –±–∞–∑–∏")
    
    print(f"\nüìÅ –§–∞–π–ª–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏:")
    for f in FILES:
        print(f"  - {f}")
    
    print(f"\n‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:")
    print(f"  - –ö–æ–ª–µ–∫—Ü—ñ—è: {COLLECTION_NAME}")
    print(f"  - Batch size: {BATCH_SIZE}")
    print(f"  - Max records: {MAX_RECORDS or '–í—Å—ñ'}")
    
    response = input("\n–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/n): ")
    if response.lower() == 'y':
        create_or_update_vector_database(
            jsonl_files=FILES,
            collection_name=COLLECTION_NAME,
            batch_size=BATCH_SIZE,
            recreate=RECREATE_DATABASE,
            max_records=MAX_RECORDS
        )
    else:
        print("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞")