#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø—Ä–æ–≥–Ω–æ–∑—É —Ç–∞ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
"""

import json
import numpy as np
import pandas as pd
from pathlib import Path
import matplotlib.pyplot as plt
import seaborn as sns
from tender_analysis_system import TenderAnalysisSystem

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
plt.style.use('seaborn-v0_8-darkgrid')
plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 10

def load_shap_analysis(filepath='shap_analysis_report.json'):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è SHAP –∑–≤—ñ—Ç—É"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ {filepath}")
        return None

def analyze_single_prediction(system, test_data):
    """–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É"""
    print("\n" + "="*80)
    print("üîç –î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó –ü–†–û–ì–ù–û–ó–£")
    print("="*80)
    
    # –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    print(f"\nüìã –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ:")
    print(f"   –Ñ–î–†–ü–û–£: {test_data['EDRPOU']}")
    print(f"   –¢–æ–≤–∞—Ä: {test_data['F_ITEMNAME']}")
    print(f"   –¢–µ–Ω–¥–µ—Ä: {test_data['F_TENDERNAME']}")
    print(f"   –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {test_data['F_INDUSTRYNAME']}")
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
    supplier_profile = None
    if system.supplier_profiler and hasattr(system.supplier_profiler, 'profiles'):
        supplier_profile = system.supplier_profiler.profiles.get(test_data['EDRPOU'])
        if supplier_profile:
            print(f"\n‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—å –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞:")
            print(f"   –ù–∞–∑–≤–∞: {supplier_profile.name}")
            print(f"   –ó–∞–≥–∞–ª—å–Ω–∏–π win rate: {supplier_profile.metrics.win_rate:.2%}")
            print(f"   –í—Å—å–æ–≥–æ —Ç–µ–Ω–¥–µ—Ä—ñ–≤: {supplier_profile.metrics.total_tenders}")
            print(f"   –í–∏–≥—Ä–∞–Ω–æ —Ç–µ–Ω–¥–µ—Ä—ñ–≤: {supplier_profile.metrics.won_tenders}")
        else:
            print(f"\n‚ö†Ô∏è –ü—Ä–æ—Ñ—ñ–ª—å –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ!")
    
    # –í–∏—Ç—è–≥—É—î–º–æ –æ–∑–Ω–∞–∫–∏
    features = system.feature_extractor.extract_features(test_data, supplier_profile)
    
    print(f"\nüìä –í–∏—Ç—è–≥–Ω—É—Ç—ñ –æ–∑–Ω–∞–∫–∏ (–≤—Å—å–æ–≥–æ {len(features)}):")
    print("-"*80)
    
    # –ì—Ä—É–ø—É—î–º–æ –æ–∑–Ω–∞–∫–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
    experience_features = ['has_category_experience', 'experience_type', 'supplier_category_experience', 
                          'supplier_category_win_rate', 'supplier_category_wins']
    supplier_features = ['supplier_win_rate', 'supplier_position_win_rate', 'supplier_experience',
                        'supplier_stability', 'supplier_specialization', 'supplier_recent_win_rate',
                        'supplier_growth_rate', 'supplier_reliability']
    market_features = ['category_avg_suppliers', 'category_win_probability', 'category_market_openness',
                      'category_entry_barrier', 'is_new_supplier', 'supplier_vs_market_avg']
    competition_features = ['competitor_top_avg_win_rate', 'supplier_vs_top_competitors']
    other_features = ['has_brand', 'supplier_category_fit', 'competitive_strength']
    
    # –í–∏–≤–æ–¥–∏–º–æ –ø–æ –≥—Ä—É–ø–∞—Ö
    print("\nüéØ –î–û–°–í–Ü–î –í –ö–ê–¢–ï–ì–û–†–Ü–á:")
    for feat in experience_features:
        if feat in features:
            value = features[feat]
            print(f"   {feat:40}: {value:10.4f}")
    
    print("\nüìà –ú–ï–¢–†–ò–ö–ò –ü–û–°–¢–ê–ß–ê–õ–¨–ù–ò–ö–ê:")
    for feat in supplier_features:
        if feat in features:
            value = features[feat]
            print(f"   {feat:40}: {value:10.4f}")
    
    print("\nüè™ –†–ò–ù–ö–û–í–Ü –ü–û–ö–ê–ó–ù–ò–ö–ò:")
    for feat in market_features:
        if feat in features:
            value = features[feat]
            print(f"   {feat:40}: {value:10.4f}")
    
    print("\nü•ä –ö–û–ù–ö–£–†–ï–ù–¶–Ü–Ø:")
    for feat in competition_features:
        if feat in features:
            value = features[feat]
            print(f"   {feat:40}: {value:10.4f}")
    
    print("\nüîß –Ü–ù–®–Ü –û–ó–ù–ê–ö–ò:")
    for feat in other_features:
        if feat in features:
            value = features[feat]
            print(f"   {feat:40}: {value:10.4f}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ DataFrame –¥–ª—è –ø—Ä–µ–¥–∏–∫—Ü—ñ—ó
    X_single = pd.DataFrame([features])
    
    # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏
    for col in system.predictor.feature_names:
        if col not in X_single.columns:
            X_single[col] = 0
    X_single = X_single[system.predictor.feature_names]
    
    # –î–æ–¥–∞—î–º–æ interaction features
    X_single = system.feature_extractor.create_interaction_features(X_single)
    
    # –û–±—Ä–æ–±–∫–∞ —á–µ—Ä–µ–∑ feature processor
    if hasattr(system.predictor, 'feature_processor'):
        X_processed = system.predictor.feature_processor.transform(X_single)
    else:
        X_processed = X_single
    
    # –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
    X_scaled = system.predictor.scalers['main'].transform(X_processed)
    
    # –ü—Ä–æ–≥–Ω–æ–∑–∏ –≤—ñ–¥ –∫–æ–∂–Ω–æ—ó –º–æ–¥–µ–ª—ñ
    print("\nüé≤ –ü–†–û–ì–ù–û–ó–ò –ú–û–î–ï–õ–ï–ô:")
    print("-"*80)
    
    predictions = {}
    for model_name, model in system.predictor.models.items():
        pred = model.predict_proba(X_scaled)[0][1]
        predictions[model_name] = pred
        print(f"   {model_name:20}: {pred:8.2%}")
    
    # –ê–Ω—Å–∞–º–±–ª—å
    ensemble_weights = system.predictor.ensemble_weights
    ensemble_pred = sum(predictions[name] * ensemble_weights.get(name, 1.0) for name in predictions)
    ensemble_pred /= sum(ensemble_weights.values())
    
    print(f"\n   {'ENSEMBLE':20}: {ensemble_pred:8.2%} (—Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑)")
    print(f"\n   –í–∞–≥–∏ –∞–Ω—Å–∞–º–±–ª—é: {ensemble_weights}")
    
    return {
        'features': features,
        'predictions': predictions,
        'ensemble_prediction': ensemble_pred
    }

def compare_feature_importance(shap_report):
    """–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ –æ–∑–Ω–∞–∫ –º—ñ–∂ –º–æ–¥–µ–ª—è–º–∏"""
    if not shap_report:
        print("‚ö†Ô∏è SHAP –∑–≤—ñ—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π")
        return
    
    print("\n" + "="*80)
    print("üìä –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –í–ê–ñ–õ–ò–í–û–°–¢–Ü –û–ó–ù–ê–ö")
    print("="*80)
    
    feature_analysis = shap_report.get('feature_analysis', {})
    
    # –ó–±–∏—Ä–∞—î–º–æ —Ç–æ–ø-15 –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∏—Ö –æ–∑–Ω–∞–∫
    all_features = {}
    for feature, model_data in feature_analysis.items():
        total_importance = sum(data['mean_abs_shap'] for data in model_data.values())
        all_features[feature] = total_importance
    
    # –°–æ—Ä—Ç—É—î–º–æ
    top_features = sorted(all_features.items(), key=lambda x: x[1], reverse=True)[:15]
    
    print("\nüèÜ –¢–û–ü-15 –ù–ê–ô–í–ê–ñ–õ–ò–í–Ü–®–ò–• –û–ó–ù–ê–ö:")
    print("-"*80)
    print(f"{'–û–∑–Ω–∞–∫–∞':45} {'–í–∞–∂–ª–∏–≤—ñ—Å—Ç—å':>12} {'–í–ø–ª–∏–≤':>10}")
    print("-"*80)
    
    for feature, importance in top_features:
        # –°–µ—Ä–µ–¥–Ω—ñ–π –Ω–∞–ø—Ä—è–º–æ–∫ –≤–ø–ª–∏–≤—É
        directions = []
        for model_data in feature_analysis[feature].values():
            if model_data['positive_impact_ratio'] > 0.5:
                directions.append('‚Üë')
            else:
                directions.append('‚Üì')
        
        # –ù–∞–π—á–∞—Å—Ç—ñ—à–∏–π –Ω–∞–ø—Ä—è–º–æ–∫
        direction = max(set(directions), key=directions.count) if directions else '?'
        
        print(f"{feature:45} {importance:12.6f} {direction:>10}")
    
    # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è
    if len(top_features) > 0:
        plt.figure(figsize=(10, 8))
        features, importances = zip(*top_features)
        
        colors = ['#2E86AB', '#A23B72', '#F18F01', '#C73E1D', '#6A994E',
                  '#BC4749', '#386641', '#F2CC8F', '#81B29A', '#F07167',
                  '#AFD5AA', '#F4A261', '#E76F51', '#264653', '#2A9D8F']
        
        bars = plt.barh(range(len(features)), importances, color=colors[:len(features)])
        plt.yticks(range(len(features)), features)
        plt.xlabel('–°—É–º–∞—Ä–Ω–∞ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å (SHAP)')
        plt.title('–¢–æ–ø-15 –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∏—Ö –æ–∑–Ω–∞–∫ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è')
        plt.tight_layout()
        
        # –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ –±–∞—Ä–∞—Ö
        for i, (bar, imp) in enumerate(zip(bars, importances)):
            plt.text(bar.get_width() + 0.001, bar.get_y() + bar.get_height()/2,
                    f'{imp:.4f}', va='center', fontsize=9)
        
        plt.savefig('feature_importance_comparison.png', dpi=300, bbox_inches='tight')
        plt.show()
        print("\nüìä –ì—Ä–∞—Ñ—ñ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: feature_importance_comparison.png")

def analyze_feature_changes(system, test_data):
    """–ê–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω –≤ –æ–∑–Ω–∞–∫–∞—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–∫–ª–∞–¥—É"""
    print("\n" + "="*80)
    print("üîÑ –ê–ù–ê–õ–Ü–ó –ó–ú–Ü–ù –í –û–ó–ù–ê–ö–ê–•")
    print("="*80)
    
    # –ö–ª—é—á–æ–≤—ñ –æ–∑–Ω–∞–∫–∏, —è–∫—ñ –º–æ–≥–ª–∏ –≤–ø–ª–∏–Ω—É—Ç–∏ –Ω–∞ –∑–Ω–∏–∂–µ–Ω–Ω—è
    critical_features = [
        'supplier_category_win_rate',
        'supplier_category_experience',
        'has_category_experience',
        'experience_type',
        'category_entry_barrier',
        'supplier_win_rate',
        'competitive_strength',
        'supplier_category_fit'
    ]
    
    supplier_profile = system.supplier_profiler.profiles.get(test_data['EDRPOU'])
    features = system.feature_extractor.extract_features(test_data, supplier_profile)
    
    print("\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–Ü –û–ó–ù–ê–ö–ò –î–õ–Ø –í–ê–®–û–ì–û –ü–†–û–ì–ù–û–ó–£:")
    print("-"*80)
    
    for feat in critical_features:
        if feat in features:
            value = features[feat]
            
            # –Ü–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—è
            interpretation = ""
            if feat == 'has_category_experience' and value == 0:
                interpretation = "‚ùå –ù–ï–ú–ê–Ñ –¥–æ—Å–≤—ñ–¥—É –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó!"
            elif feat == 'experience_type':
                if value == 1:
                    interpretation = "‚úÖ –ü—Ä—è–º–∏–π –¥–æ—Å–≤—ñ–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
                elif value == 2:
                    interpretation = "‚ö° –î–æ—Å–≤—ñ–¥ –≤ –∫–ª–∞—Å—Ç–µ—Ä—ñ"
                else:
                    interpretation = "‚ùå –ù–µ–º–∞—î —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É"
            elif feat == 'supplier_category_win_rate' and value < 0.2:
                interpretation = "‚ö†Ô∏è –ù–∏–∑—å–∫–∏–π win rate –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
            elif feat == 'category_entry_barrier' and value > 0.7:
                interpretation = "‚ö†Ô∏è –í–∏—Å–æ–∫–∏–π –±–∞—Ä'—î—Ä –≤—Ö–æ–¥—É"
            
            print(f"{feat:35}: {value:8.4f}  {interpretation}")
    
    # –ê–Ω–∞–ª—ñ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π–Ω–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É
    print("\nüìã –î–û–°–í–Ü–î –í –ö–ê–¢–ï–ì–û–†–Ü–á:")
    category = test_data['F_INDUSTRYNAME']
    
    if supplier_profile:
        if category in supplier_profile.categories:
            cat_data = supplier_profile.categories[category]
            print(f"   ‚úÖ –Ñ –¥–æ—Å–≤—ñ–¥ –≤ '{category}':")
            print(f"      - –í—Å—å–æ–≥–æ —Ç–µ–Ω–¥–µ—Ä—ñ–≤: {cat_data.get('total', 0)}")
            print(f"      - –í–∏–≥—Ä–∞–Ω–æ: {cat_data.get('won', 0)}")
            print(f"      - Win rate: {cat_data.get('win_rate', 0):.2%}")
        else:
            print(f"   ‚ùå –ù–ï–ú–ê–Ñ –¥–æ—Å–≤—ñ–¥—É –≤ '{category}'")
            print(f"   üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–µ —î –¥–æ—Å–≤—ñ–¥:")
            for cat_name, cat_data in list(supplier_profile.categories.items())[:5]:
                print(f"      - {cat_name}: {cat_data.get('total', 0)} —Ç–µ–Ω–¥–µ—Ä—ñ–≤, "
                      f"win rate {cat_data.get('win_rate', 0):.2%}")

def suggest_improvements(features, predictions):
    """–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —â–æ–¥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É"""
    print("\n" + "="*80)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á –î–õ–Ø –ü–û–ö–†–ê–©–ï–ù–ù–Ø –ü–†–û–ì–ù–û–ó–£")
    print("="*80)
    
    ensemble_pred = predictions['ensemble_prediction']
    
    print(f"\n–ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑: {ensemble_pred:.2%}")
    
    if ensemble_pred < 0.4:
        print("\n‚ö†Ô∏è –ù–∏–∑—å–∫–∞ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–≥–∏. –û—Å–Ω–æ–≤–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏:")
        
        # –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–±–ª–µ–º
        problems = []
        
        if features.get('has_category_experience', 0) == 0:
            problems.append("1. –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –¥–æ—Å–≤—ñ–¥—É –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó - —Ü–µ –ö–†–ò–¢–ò–ß–ù–û!")
            problems.append("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –†–æ–∑–≥–ª—è–Ω—å—Ç–µ —É—á–∞—Å—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö –¥–µ —î –¥–æ—Å–≤—ñ–¥")
        
        if features.get('supplier_category_win_rate', 0) < 0.2:
            problems.append("2. –ù–∏–∑—å–∫–∏–π win rate –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó")
            problems.append("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –ü–æ–∫—Ä–∞—â—ñ—Ç—å —Ü—ñ–Ω–æ–≤—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é")
        
        if features.get('category_entry_barrier', 0) > 0.7:
            problems.append("3. –í–∏—Å–æ–∫–∏–π –±–∞—Ä'—î—Ä –≤—Ö–æ–¥—É –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")
            problems.append("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –†–æ–∑–≥–ª—è–Ω—å—Ç–µ –º–µ–Ω—à –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó")
        
        if features.get('supplier_vs_top_competitors', 0) < -0.2:
            problems.append("4. –ó–Ω–∞—á–Ω–æ —Å–ª–∞–±—à—ñ –∑–∞ —Ç–æ–ø –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤")
            problems.append("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –ª—ñ–¥–µ—Ä—ñ–≤")
        
        for problem in problems:
            print(f"\n{problem}")
    
    # –ü–æ—Ç–µ–Ω—Ü—ñ–∞–ª –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
    print("\nüìà –ü–û–¢–ï–ù–¶–Ü–ê–õ –ü–û–ö–†–ê–©–ï–ù–ù–Ø:")
    
    if features.get('has_category_experience', 0) == 0:
        potential_gain = 0.15  # 15% –≤—ñ–¥ –¥–æ—Å–≤—ñ–¥—É
        print(f"   ‚Ä¢ –ù–∞–±—É—Ç—Ç—è –¥–æ—Å–≤—ñ–¥—É –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: +{potential_gain:.0%}")
    
    if features.get('supplier_win_rate', 0) < 0.3:
        potential_gain = 0.1
        print(f"   ‚Ä¢ –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ win rate: +{potential_gain:.0%}")
    
    if features.get('has_brand', 0) == 0:
        potential_gain = 0.05
        print(f"   ‚Ä¢ –†–æ–±–æ—Ç–∞ –∑ –±—Ä–µ–Ω–¥–æ–≤–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏: +{potential_gain:.0%}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É"""
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –ê–ù–ê–õ–Ü–ó –ü–†–û–ì–ù–û–ó–£ –¢–ï–ù–î–ï–†–ê")
    print("="*80)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
    print("\nüì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏...")
    system = TenderAnalysisSystem(
        categories_file="categories.jsonl",
        qdrant_host="localhost",
        qdrant_port=6333
    )
    system.initialize_system()
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ
    model_file = "files/tender_system_trained.pkl"
    if Path(model_file).exists():
        system.load_system(model_file)
        print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
    else:
        print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
    profiles_file = "files/supplier_profiles_with_clusters.json"
    if Path(profiles_file).exists():
        system.supplier_profiler.load_profiles(profiles_file)
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(system.supplier_profiler.profiles)} –ø—Ä–æ—Ñ—ñ–ª—ñ–≤")
    
    # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    test_data = {
        "EDRPOU": "24366711", 
        "F_ITEMNAME": "–ü—ñ–¥—à–∏–ø–Ω–∏–∫ 6301-2RSH",
        "F_TENDERNAME": "–ó–∞–∫—É–ø—ñ–≤–ª—è –ø—ñ–¥—à–∏–ø–Ω–∏–∫—ñ–≤. –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –Ω–∞–¥–∞–≤–∞—Ç–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ –∑–∞—è–≤–∫–∞–º !",
        "F_INDUSTRYNAME": "–ü–æ–¥—à–∏–ø–Ω–∏–∫–∏"
    }
    
    # 1. –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø—Ä–æ–≥–Ω–æ–∑—É
    results = analyze_single_prediction(system, test_data)
    
    # 2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –∞–Ω–∞–ª—ñ–∑ SHAP
    shap_report = load_shap_analysis()
    if shap_report:
        compare_feature_importance(shap_report)
    
    # 3. –ê–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω –≤ –æ–∑–Ω–∞–∫–∞—Ö
    analyze_feature_changes(system, test_data)
    
    # 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    suggest_improvements(results['features'], results)
    
    # 5. –§—ñ–Ω–∞–ª—å–Ω–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫
    print("\n" + "="*80)
    print("üìù –í–ò–°–ù–û–í–û–ö")
    print("="*80)
    
    print(f"\nüéØ –§—ñ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑: {results['ensemble_prediction']:.2%}")
    
    if results['ensemble_prediction'] < 0.4:
        print("\n‚ùå –û–°–ù–û–í–ù–ê –ü–†–ò–ß–ò–ù–ê –ù–ò–ó–¨–ö–û–ì–û –ü–†–û–ì–ù–û–ó–£:")
        print("   –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –¥–æ—Å–≤—ñ–¥—É –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '–°—ñ–ª—å—Å—å–∫–æ–≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫—ñ –∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏'")
        print("   –¶–µ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∏–π —Ñ–∞–∫—Ç–æ—Ä –∑–≥—ñ–¥–Ω–æ –∑ SHAP –∞–Ω–∞–ª—ñ–∑–æ–º!")
        print("\nüí° –©–û –†–û–ë–ò–¢–ò:")
        print("   1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ –∑ –¥–æ—Å–≤—ñ–¥–æ–º –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó")
        print("   2. –ê–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–µ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫ –º–∞—î –¥–æ—Å–≤—ñ–¥")
        print("   3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–∞–∑–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –≤ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö")

if __name__ == "__main__":
    main()