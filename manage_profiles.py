# manage_profiles.py
#!/usr/bin/env python3
"""
–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤
"""
import argparse
import logging
from pathlib import Path
from tender_analysis_system import TenderAnalysisSystem
from create_profiles_with_clusters import ProfileBuilderWithClusters
from update_supplier_profiles_with_clusters import update_profiles_with_clusters_and_competitors

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def main():
    parser = argparse.ArgumentParser(description='–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—è–º–∏ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤')
    parser.add_argument('action', choices=['create', 'update', 'check'], 
                        help='–î—ñ—è: create - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—ñ, update - –æ–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á—ñ, check - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏')
    parser.add_argument('--force', action='store_true', 
                        help='–ü—Ä–∏–º—É—Å–æ–≤–æ –ø–µ—Ä–µ—Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—ñ')
    
    args = parser.parse_args()
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
    logger.info("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏...")
    system = TenderAnalysisSystem(
        categories_file="categories.jsonl",
        qdrant_host="localhost",
        qdrant_port=6333
    )
    system.initialize_system()
    
    if args.action == 'check':
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
        files = [
            'supplier_profiles_with_clusters.json',
            'supplier_profiles_COMPLETE.json'
        ]
        
        for f in files:
            if Path(f).exists():
                import json
                with open(f, 'r') as file:
                    data = json.load(file)
                    logger.info(f"‚úÖ {f}: {len(data)} –ø—Ä–æ—Ñ—ñ–ª—ñ–≤")
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤
                    with_clusters = sum(1 for p in data.values() if 'clusters' in p)
                    logger.info(f"   –ó –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏: {with_clusters}")
            else:
                logger.info(f"‚ùå {f}: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    elif args.action == 'create' or args.force:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
        builder = ProfileBuilderWithClusters(system.vector_db)
        profiles = builder.build_profiles_from_vector_db()
        builder.save_profiles()
        
    elif args.action == 'update':
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö
        if Path('supplier_profiles_COMPLETE.json').exists():           
            update_profiles_with_clusters_and_competitors()
        else:
            logger.error("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è. –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—ñ.")

if __name__ == "__main__":
    main()