#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó –ø—ñ—Å–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
"""

import time
from datetime import datetime
from qdrant_client import QdrantClient
from qdrant_client.http import models


def enable_indexing(collection_name: str = "tender_vectors", 
                   host: str = "localhost", 
                   port: int = 6333):
    """–£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó –¥–ª—è –∫–æ–ª–µ–∫—Ü—ñ—ó"""
    
    print("="*60)
    print("üîß –£–í–Ü–ú–ö–ù–ï–ù–ù–Ø –Ü–ù–î–ï–ö–°–ê–¶–Ü–á –í–ï–ö–¢–û–†–ù–û–á –ë–ê–ó–ò")
    print("="*60)
    
    # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    try:
        client = QdrantClient(host=host, port=port)
        print(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Qdrant: {host}:{port}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª–µ–∫—Ü—ñ—ó
    try:
        collection_info = client.get_collection(collection_name)
        points_count = collection_info.points_count
        print(f"üìä –ö–æ–ª–µ–∫—Ü—ñ—è '{collection_name}': {points_count:,} –∑–∞–ø–∏—Å—ñ–≤")
        
        if points_count == 0:
            print("‚ö†Ô∏è –ö–æ–ª–µ–∫—Ü—ñ—è –ø–æ—Ä–æ–∂–Ω—è, —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—é –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ")
            return False
            
    except Exception as e:
        print(f"‚ùå –ö–æ–ª–µ–∫—Ü—ñ—è '{collection_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {e}")
        return False
    
    # –ó–∞–ø–∏—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    print(f"\nü§î –£–≤—ñ–º–∫–Ω—É—Ç–∏ —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—é –¥–ª—è {points_count:,} –∑–∞–ø–∏—Å—ñ–≤?")
    print("‚è±Ô∏è –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ 30-60 —Ö–≤–∏–ª–∏–Ω")
    response = input("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/n): ")
    
    if response.lower() != 'y':
        print("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞")
        return False
    
    start_time = datetime.now()
    print(f"\nüöÄ –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó: {start_time.strftime('%H:%M:%S')}")
    
    try:
        # –ö—Ä–æ–∫ 1: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è —à–≤–∏–¥—à–æ—ó —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó
        print("\n‚öôÔ∏è –ö—Ä–æ–∫ 1: –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó...")
        client.update_collection(
            collection_name=collection_name,
            optimizers_config=models.OptimizersConfigDiff(
                default_segment_number=4,      # –ë—ñ–ª—å—à–µ —Å–µ–≥–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—Å—Ç—ñ
                max_segment_size=500000,       # –°–µ—Ä–µ–¥–Ω—ñ —Å–µ–≥–º–µ–Ω—Ç–∏
                memmap_threshold=20000,        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø–æ—Ä—ñ–≥
                indexing_threshold=20000,      # –£–í–Ü–ú–ö–ù–£–¢–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—é
                flush_interval_sec=30,         # –ß–∞—Å—Ç—ñ—à–µ —Å–∫–∏–¥–∞–Ω–Ω—è
                max_optimization_threads=4     # –ë—ñ–ª—å—à–µ –ø–æ—Ç–æ–∫—ñ–≤ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
            )
        )
        print("‚úÖ –û–ø—Ç–∏–º—ñ–∑–∞—Ç–æ—Ä–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó")
        
        # –ö—Ä–æ–∫ 2: –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è HNSW —ñ–Ω–¥–µ–∫—Å—É
        print("\nüìà –ö—Ä–æ–∫ 2: –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è HNSW —ñ–Ω–¥–µ–∫—Å—É...")
        client.update_collection(
            collection_name=collection_name,
            hnsw_config=models.HnswConfigDiff(
                m=16,                          # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≥—Ä–∞—Ñ—É
                ef_construct=200,              # –Ø–∫—ñ—Å–Ω–∞ –ø–æ–±—É–¥–æ–≤–∞
                full_scan_threshold=10000,     # –ü–æ—Ä—ñ–≥ –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
                max_indexing_threads=0,        # 0 = –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —è–¥—Ä–∞
                on_disk=True,                  # –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ –Ω–∞ –¥–∏—Å–∫—É
                payload_m=16                   # –Ü–Ω–¥–µ–∫—Å–∞—Ü—ñ—è payload
            )
        )
        print("‚úÖ HNSW —ñ–Ω–¥–µ–∫—Å —É–≤—ñ–º–∫–Ω–µ–Ω–æ")
        
        # –ö—Ä–æ–∫ 3: –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü—ñ—ó (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        print("\nüóúÔ∏è –ö—Ä–æ–∫ 3: –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü—ñ—ó...")
        try:
            client.update_collection(
                collection_name=collection_name,
                quantization_config=models.ScalarQuantization(
                    scalar=models.ScalarQuantizationConfig(
                        type=models.ScalarType.INT8,
                        quantile=0.99,
                        always_ram=False
                    )
                )
            )
            print("‚úÖ –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü—ñ—è —É–≤—ñ–º–∫–Ω–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü—ñ—é –Ω–µ –≤–¥–∞–ª–æ—Å—è —É–≤—ñ–º–∫–Ω—É—Ç–∏: {e}")
        
        # –ö—Ä–æ–∫ 4: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —ñ–Ω–¥–µ–∫—Å—ñ–≤ –¥–ª—è payload
        print("\nüìã –ö—Ä–æ–∫ 4: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —ñ–Ω–¥–µ–∫—Å—ñ–≤...")
        additional_indexes = [
            ("industry", models.PayloadSchemaType.KEYWORD),
            ("primary_category", models.PayloadSchemaType.KEYWORD),
            ("cpv", models.PayloadSchemaType.INTEGER),
            ("budget", models.PayloadSchemaType.FLOAT),
            ("date_end", models.PayloadSchemaType.KEYWORD),
            ("owner_name", models.PayloadSchemaType.KEYWORD)
        ]
        
        for field_name, field_type in additional_indexes:
            try:
                client.create_payload_index(
                    collection_name=collection_name,
                    field_name=field_name,
                    field_schema=field_type,
                    wait=False  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
                )
                print(f"  ‚úÖ –Ü–Ω–¥–µ–∫—Å –¥–ª—è {field_name}")
            except Exception as e:
                print(f"  ‚ö†Ô∏è –Ü–Ω–¥–µ–∫—Å –¥–ª—è {field_name}: {e}")
        
        # –ö—Ä–æ–∫ 5: –§–æ—Ä—Å—É–≤–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó
        print(f"\nüî® –ö—Ä–æ–∫ 5: –§–æ—Ä—Å—É–≤–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó...")
        print("   (–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ 30-60 —Ö–≤–∏–ª–∏–Ω)")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–ª–µ–∫—Ü—ñ—é –¥–ª—è –∑–∞–ø—É—Å–∫—É —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó
        client.update_collection(
            collection_name=collection_name,
            optimizers_config=models.OptimizersConfigDiff(
                indexing_threshold=1000  # –ù–∏–∑—å–∫–∏–π –ø–æ—Ä—ñ–≥ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—á–∞—Ç–∫—É
            )
        )
        
        # –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—É
        print("\n‚è≥ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó...")
        last_status = None
        stable_count = 0
        check_interval = 30  # —Å–µ–∫—É–Ω–¥–∏
        
        while True:
            time.sleep(check_interval)
            
            try:
                info = client.get_collection(collection_name)
                
                # –°—Ç–∞—Ç—É—Å –∫–æ–ª–µ–∫—Ü—ñ—ó
                current_status = info.status
                
                if current_status != last_status:
                    print(f"   üìä –°—Ç–∞—Ç—É—Å: {current_status}")
                    last_status = current_status
                    stable_count = 0
                else:
                    stable_count += 1
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
                if current_status == "green" and stable_count >= 3:
                    print("   ‚úÖ –Ü–Ω–¥–µ–∫—Å–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    break
                
                # –ß–∞—Å
                elapsed = (datetime.now() - start_time).total_seconds() / 60
                print(f"   ‚è±Ô∏è –ü—Ä–æ–π—à–ª–æ: {elapsed:.1f} —Ö–≤")
                
                # –¢–∞–π–º-–∞—É—Ç (2 –≥–æ–¥–∏–Ω–∏)
                if elapsed > 120:
                    print("‚ö†Ô∏è –¢–∞–π–º-–∞—É—Ç –¥–æ—Å—è–≥–Ω—É—Ç–æ, —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—è –º–æ–∂–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏—Å—è –≤ —Ñ–æ–Ω—ñ")
                    break
                    
            except Exception as e:
                print(f"   ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
                break
        
        # –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
        print(f"\nüîç –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞...")
        final_info = client.get_collection(collection_name)
        
        # –¢–µ—Å—Ç–æ–≤–∏–π –ø–æ—à—É–∫
        print(f"üß™ –¢–µ—Å—Ç –ø–æ—à—É–∫—É...")
        test_vector = [0.1] * 768
        search_start = time.time()
        
        results = client.search(
            collection_name=collection_name,
            query_vector=test_vector,
            limit=5
        )
        
        search_time = (time.time() - search_start) * 1000
        
        total_time = (datetime.now() - start_time).total_seconds() / 60
        
        print("\n" + "="*60)
        print("üéâ –Ü–ù–î–ï–ö–°–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("="*60)
        print(f"üìä –ó–∞–ø–∏—Å—ñ–≤ —É –∫–æ–ª–µ–∫—Ü—ñ—ó: {final_info.points_count:,}")
        print(f"üìä –°—Ç–∞—Ç—É—Å –∫–æ–ª–µ–∫—Ü—ñ—ó: {final_info.status}")
        print(f"‚è±Ô∏è –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: {total_time:.1f} —Ö–≤–∏–ª–∏–Ω")
        print(f"üîç –ß–∞—Å –ø–æ—à—É–∫—É: {search_time:.1f} –º—Å")
        print(f"üìà –ó–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: {len(results)}")
        
        if search_time < 100:
            print(f"‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞ –±–∞–∑–∞ –ø—Ä–∞—Ü—é—î –í–Ü–î–ú–Ü–ù–ù–û!")
        elif search_time < 500:
            print(f"‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞ –±–∞–∑–∞ –ø—Ä–∞—Ü—é—î –¥–æ–±—Ä–µ")
        else:
            print(f"‚ö†Ô∏è –í–µ–∫—Ç–æ—Ä–Ω–∞ –±–∞–∑–∞ –ø—Ä–∞—Ü—é—î –ø–æ–≤—ñ–ª—å–Ω–æ")
        
        print("="*60)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó: {e}")
        import traceback
        traceback.print_exc()
        return False


def check_indexing_status(collection_name: str = "tender_vectors"):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó"""
    try:
        client = QdrantClient(host="localhost", port=6333)
        info = client.get_collection(collection_name)
        
        print(f"\nüìä –°—Ç–∞—Ç—É—Å –∫–æ–ª–µ–∫—Ü—ñ—ó '{collection_name}':")
        print(f"   ‚Ä¢ –ó–∞–ø–∏—Å—ñ–≤: {info.points_count:,}")
        print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {info.status}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        print(f"\n‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:")
        if hasattr(info.config, 'optimizer_config'):
            opt_config = info.config.optimizer_config
            print(f"   ‚Ä¢ –ü–æ—Ä—ñ–≥ —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó: {opt_config.indexing_threshold}")
        
        if hasattr(info.config, 'hnsw_config'):
            hnsw_config = info.config.hnsw_config
            print(f"   ‚Ä¢ HNSW m: {hnsw_config.m}")
            print(f"   ‚Ä¢ HNSW ef_construct: {hnsw_config.ef_construct}")
        
        # –¢–µ—Å—Ç —à–≤–∏–¥–∫–æ—Å—Ç—ñ –ø–æ—à—É–∫—É
        print(f"\nüß™ –¢–µ—Å—Ç –ø–æ—à—É–∫—É...")
        test_vector = [0.1] * 768
        start_time = time.time()
        
        results = client.search(
            collection_name=collection_name,
            query_vector=test_vector,
            limit=5
        )
        
        search_time = (time.time() - start_time) * 1000
        print(f"   ‚Ä¢ –®–≤–∏–¥–∫—ñ—Å—Ç—å –ø–æ—à—É–∫—É: {search_time:.1f} –º—Å")
        print(f"   ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ: {len(results)}")
        
        if search_time < 100:
            print("   ‚úÖ –Ü–Ω–¥–µ–∫—Å–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î –≤—ñ–¥–º—ñ–Ω–Ω–æ")
        elif search_time < 500:
            print("   ‚ö†Ô∏è –Ü–Ω–¥–µ–∫—Å–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î, –∞–ª–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        else:
            print("   ‚ùå –Ü–Ω–¥–µ–∫—Å–∞—Ü—ñ—è –Ω–µ –ø—Ä–∞—Ü—é—î –∞–±–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")


if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "status":
        check_indexing_status()
    else:
        success = enable_indexing()
        if not success:
            sys.exit(1)