#!/usr/bin/env python3
"""
–í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó –∑ –±—ñ–ª—å—à–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
"""

import time
from datetime import datetime
from qdrant_client import QdrantClient
from qdrant_client.http import models
import httpx


def enable_indexing_with_timeout(collection_name: str = "tender_vectors", 
                                host: str = "localhost", 
                                port: int = 6333):
    """–£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó –∑ –≤–µ–ª–∏–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º"""
    
    print("="*60)
    print("üîß –£–í–Ü–ú–ö–ù–ï–ù–ù–Ø –Ü–ù–î–ï–ö–°–ê–¶–Ü–á (–∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º)")
    print("="*60)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –∑ –í–ï–õ–ò–ö–ò–ú —Ç–∞–π–º–∞—É—Ç–æ–º
    try:
        client = QdrantClient(
            host=host, 
            port=port,
            timeout=300,  # 5 —Ö–≤–∏–ª–∏–Ω –±–∞–∑–æ–≤–∏–π —Ç–∞–π–º–∞—É—Ç
            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
            grpc_options={
                "keepalive_time_ms": 10000,
                "keepalive_timeout_ms": 5000,
                "keepalive_permit_without_calls": True,
                "http2_max_pings_without_data": 0,
            } if port == 6334 else None
        )
        print(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Qdrant: {host}:{port}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª–µ–∫—Ü—ñ—ó
    try:
        collection_info = client.get_collection(collection_name)
        points_count = collection_info.points_count
        current_status = collection_info.status
        
        print(f"\nüìä –ö–æ–ª–µ–∫—Ü—ñ—è '{collection_name}':")
        print(f"   ‚Ä¢ –ó–∞–ø–∏—Å—ñ–≤: {points_count:,}")
        print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {current_status}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–∂–µ –π–¥–µ —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—è
        if current_status == "yellow":
            print("\n‚ö†Ô∏è  –Ü–Ω–¥–µ–∫—Å–∞—Ü—ñ—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è!")
            print("   Qdrant –ø—Ä–æ–¥–æ–≤–∂—É—î —ñ–Ω–¥–µ–∫—Å—É–≤–∞—Ç–∏ —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ.")
            
            response = input("\n–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥? (y/n): ")
            if response.lower() == 'y':
                monitor_indexing(client, collection_name)
            return True
            
    except Exception as e:
        print(f"‚ùå –ö–æ–ª–µ–∫—Ü—ñ—è '{collection_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {e}")
        return False
    
    # –ó–∞–ø–∏—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    print(f"\nü§î –£–≤—ñ–º–∫–Ω—É—Ç–∏ —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—é –¥–ª—è {points_count:,} –∑–∞–ø–∏—Å—ñ–≤?")
    print("‚è±Ô∏è  –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ 1-3 –≥–æ–¥–∏–Ω–∏ –¥–ª—è 30GB")
    response = input("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/n): ")
    
    if response.lower() != 'y':
        print("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞")
        return False
    
    start_time = datetime.now()
    print(f"\nüöÄ –ü–æ—á–∞—Ç–æ–∫: {start_time.strftime('%H:%M:%S')}")
    
    # –ü–æ–µ—Ç–∞–ø–Ω–µ —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó
    try:
        # –ö—Ä–æ–∫ 1: –ú'—è–∫—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        print("\n‚öôÔ∏è  –ö—Ä–æ–∫ 1: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ç–æ—Ä—ñ–≤...")
        try:
            client.update_collection(
                collection_name=collection_name,
                optimizers_config=models.OptimizersConfigDiff(
                    indexing_threshold=50000,  # –ü–æ–º—ñ—Ä–Ω–∏–π –ø–æ—Ä—ñ–≥
                    flush_interval_sec=60,     # –ß–∞—Å—Ç—ñ—à–µ —Å–∫–∏–¥–∞–Ω–Ω—è
                    max_optimization_threads=4  # –ë—ñ–ª—å—à–µ –ø–æ—Ç–æ–∫—ñ–≤
                ),
                timeout=60  # 1 —Ö–≤–∏–ª–∏–Ω–∞ –Ω–∞ —Ü—é –æ–ø–µ—Ä–∞—Ü—ñ—é
            )
            print("‚úÖ –û–ø—Ç–∏–º—ñ–∑–∞—Ç–æ—Ä–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
        except Exception as e:
            print(f"‚ö†Ô∏è  –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –æ–ø—Ç–∏–º—ñ–∑–∞—Ç–æ—Ä—ñ–≤ (—Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ): {e}")
        
        # –î–∞—î–º–æ —á–∞—Å –Ω–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è
        time.sleep(5)
        
        # –ö—Ä–æ–∫ 2: –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è HNSW –ø–æ—Å—Ç—É–ø–æ–≤–æ
        print("\nüìà –ö—Ä–æ–∫ 2: –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è HNSW —ñ–Ω–¥–µ–∫—Å—É...")
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –±–∞–∑–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            client.update_collection(
                collection_name=collection_name,
                hnsw_config=models.HnswConfigDiff(
                    m=16,
                    ef_construct=100,  # –ú–µ–Ω—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —à–≤–∏–¥—à–æ—ó –ø–æ–±—É–¥–æ–≤–∏
                    full_scan_threshold=20000,
                    on_disk=True
                ),
                timeout=60
            )
            print("‚úÖ HNSW —É–≤—ñ–º–∫–Ω–µ–Ω–æ –∑ –±–∞–∑–æ–≤–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        except Exception as e:
            print(f"‚ö†Ô∏è  –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—ñ HNSW (—Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ): {e}")
        
        # –ö—Ä–æ–∫ 3: –§–æ—Ä—Å—É–≤–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó
        print("\nüî® –ö—Ä–æ–∫ 3: –ó–∞–ø—É—Å–∫ —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó...")
        try:
            client.update_collection(
                collection_name=collection_name,
                optimizers_config=models.OptimizersConfigDiff(
                    indexing_threshold=1000  # –ù–∏–∑—å–∫–∏–π –ø–æ—Ä—ñ–≥ –¥–ª—è —Å—Ç–∞—Ä—Ç—É
                ),
                timeout=30
            )
            print("‚úÖ –Ü–Ω–¥–µ–∫—Å–∞—Ü—ñ—è –∑–∞–ø—É—â–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è  –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É (—Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ): {e}")
        
        print("\n‚úÖ –í—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        print("üìã Qdrant —Ç–µ–ø–µ—Ä –≤–∏–∫–æ–Ω—É—î —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—é —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ")
        
        # –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        response = input("\nüìä –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—É? (y/n): ")
        if response.lower() == 'y':
            monitor_indexing(client, collection_name)
        else:
            print("\nüí° –ü—ñ–¥–∫–∞–∑–∫–∞: –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø—ñ–∑–Ω—ñ—à–µ –∫–æ–º–∞–Ω–¥–æ—é:")
            print("   python enable_indexing.py status")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return False


def monitor_indexing(client: QdrantClient, collection_name: str):
    """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—É —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó"""
    print("\n‚è≥ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó...")
    print("(–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –≤–∏—Ö–æ–¥—É)")
    
    last_status = None
    stable_green_count = 0
    start_time = datetime.now()
    
    try:
        while True:
            try:
                info = client.get_collection(collection_name)
                current_status = info.status
                
                # –í–∏–≤—ñ–¥ —Å—Ç–∞—Ç—É—Å—É —è–∫—â–æ –∑–º—ñ–Ω–∏–≤—Å—è
                if current_status != last_status:
                    print(f"\n[{datetime.now().strftime('%H:%M:%S')}] –°—Ç–∞—Ç—É—Å: {current_status}")
                    last_status = current_status
                    
                    if current_status == "green":
                        stable_green_count += 1
                    else:
                        stable_green_count = 0
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
                if stable_green_count >= 3:
                    print("\n‚úÖ –Ü–Ω–¥–µ–∫—Å–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    
                    # –§—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç
                    test_search_performance(client, collection_name)
                    
                    elapsed = (datetime.now() - start_time).total_seconds() / 60
                    print(f"\n‚è±Ô∏è  –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: {elapsed:.1f} —Ö–≤–∏–ª–∏–Ω")
                    break
                
                # –ü—Ä–æ–≥—Ä–µ—Å –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
                elapsed = (datetime.now() - start_time).total_seconds()
                if int(elapsed) % 300 == 0:  # –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
                    print(f"   ‚è±Ô∏è  –ü—Ä–æ–π—à–ª–æ: {elapsed/60:.1f} —Ö–≤")
                
                time.sleep(30)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
                time.sleep(60)
                
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ")
        print("üí° –Ü–Ω–¥–µ–∫—Å–∞—Ü—ñ—è –ø—Ä–æ–¥–æ–≤–∂—É—î—Ç—å—Å—è —É —Ñ–æ–Ω—ñ")


def test_search_performance(client: QdrantClient, collection_name: str):
    """–¢–µ—Å—Ç —à–≤–∏–¥–∫–æ—Å—Ç—ñ –ø–æ—à—É–∫—É"""
    print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É...")
    
    test_vector = [0.1] * 768
    
    # –ö—ñ–ª—å–∫–∞ —Ç–µ—Å—Ç—ñ–≤
    times = []
    for i in range(5):
        start = time.time()
        try:
            results = client.search(
                collection_name=collection_name,
                query_vector=test_vector,
                limit=10,
                timeout=10
            )
            search_time = (time.time() - start) * 1000
            times.append(search_time)
            print(f"   –¢–µ—Å—Ç {i+1}: {search_time:.1f} –º—Å ({len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤)")
        except Exception as e:
            print(f"   –¢–µ—Å—Ç {i+1}: –ü–æ–º–∏–ª–∫–∞ - {e}")
    
    if times:
        avg_time = sum(times) / len(times)
        print(f"\nüìä –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –ø–æ—à—É–∫—É: {avg_time:.1f} –º—Å")
        
        if avg_time < 50:
            print("‚úÖ –í—ñ–¥–º—ñ–Ω–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å!")
        elif avg_time < 100:
            print("‚úÖ –•–æ—Ä–æ—à–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å")
        elif avg_time < 500:
            print("‚ö†Ô∏è  –ü—Ä–∏–π–Ω—è—Ç–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å")
        else:
            print("‚ùå –ü–æ–≤—ñ–ª—å–Ω–∏–π –ø–æ—à—É–∫ - —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—è –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def check_status(collection_name: str = "tender_vectors"):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó"""
    try:
        client = QdrantClient(host="localhost", port=6333, timeout=30)
        info = client.get_collection(collection_name)
        
        print(f"\nüìä –°—Ç–∞—Ç—É—Å –∫–æ–ª–µ–∫—Ü—ñ—ó '{collection_name}':")
        print(f"   ‚Ä¢ –ó–∞–ø–∏—Å—ñ–≤: {info.points_count:,}")
        print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {info.status}")
        
        # –¢–µ—Å—Ç —à–≤–∏–¥–∫–æ—Å—Ç—ñ
        test_search_performance(client, collection_name)
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "status":
        check_status()
    else:
        enable_indexing_with_timeout()