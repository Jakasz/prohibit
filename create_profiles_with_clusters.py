# create_profiles_with_clusters.py
import json
import logging
import os
from pathlib import Path
from collections import defaultdict
from datetime import datetime
import pickle
from tqdm import tqdm
from supplier_profiler import SupplierProfiler

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ProfileBuilderWithClusters:
    def __init__(self, vector_db, category_mappings_file='data/categories_map.json'):
        self.vector_db = vector_db
        self.use_cache = True
        self.category_mappings = self._load_category_mappings(category_mappings_file)
        self.cache_file = "all_data_cache.pkl"
        self.profiles = {}
        
    def _load_category_mappings(self, filepath):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–∞–ø–ø—ñ–Ω–≥—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
        if Path(filepath).exists():
            with open(filepath, 'r', encoding='utf-8') as f:
                return json.load(f)
        else:
            logger.warning(f"–§–∞–π–ª {filepath} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ö–ª–∞—Å—Ç–µ—Ä–∏ –Ω–µ –±—É–¥—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è.")
            return {}
    

    def _validate_cache(self, supplier_data):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ –∫–µ—à—É"""
        if not supplier_data:
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —î –¥–∞–Ω—ñ
        total_items = sum(len(items) for items in supplier_data.values())
        logger.info(f"üìã –ö–µ—à –º—ñ—Å—Ç–∏—Ç—å {len(supplier_data)} –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤ –∑ {total_items} –∑–∞–ø–∏—Å–∞–º–∏")
        
        # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–∞—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–µ—à—É)
        cache_stat = os.stat(self.cache_file)
        cache_age_days = (os.path.getmtime(self.cache_file) - cache_stat.st_mtime) / 86400
        
        if cache_age_days > 7:  # –ö–µ—à —Å—Ç–∞—Ä—à–∏–π 7 –¥–Ω—ñ–≤
            logger.warning(f"‚ö†Ô∏è –ö–µ—à –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π ({cache_age_days:.1f} –¥–Ω—ñ–≤)")
            response = input("–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π –∫–µ—à? (y/n): ")
            return response.lower() == 'y'
        
        return True

    def _build_profiles(self, supplier_data=None):
        if supplier_data is None:
            logger.info("Error: supplier_data –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ!")
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—ñ
        for edrpou, items in tqdm(supplier_data.items(), desc="–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤"):
            supplier_data = SupplierProfiler()
            profile = supplier_data.create_profile(edrpou, items)
            if profile:
                self.profiles[edrpou] = profile
        
        # –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å—Ç–µ—Ä–∏ —Ç–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤
        self._add_clusters_and_competitors()
        return self.profiles


    def _load_data_with_cache(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –∫–µ—à—É –∞–±–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏"""
        supplier_data = defaultdict(list)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–µ—à—É
        if self.use_cache and os.path.exists(self.cache_file):
            logger.info("üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–µ—à –¥–∞–Ω–∏—Ö, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ...")
            try:
                with open(self.cache_file, 'rb') as f:
                    supplier_data = pickle.load(f)
                logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(supplier_data)} –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤ –∑ –∫–µ—à—É")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –∫–µ—à—É
                if self._validate_cache(supplier_data):                    
                   self.profiles = self._build_profiles(supplier_data)
                   return self.profiles
                else:
                    logger.warning("‚ö†Ô∏è –ö–µ—à –Ω–µ –≤–∞–ª—ñ–¥–Ω–∏–π, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ –±–∞–∑–∏...")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–µ—à—É: {e}")
                logger.info("üìä –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏...")
        else:
            logger.info("üì¶ –ö–µ—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ –±–∞–∑–∏...")

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏
        logger.info("üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏...")
        self.profiles = self.build_profiles_from_vector_db()
        return self.profiles
    
    def build_profiles_from_vector_db(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏ –∑ –Ω—É–ª—è"""
        logger.info("üöÄ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤ –∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏...")
        
        # –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –ø–æ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞—Ö
        supplier_data = defaultdict(list)        
        offset = None
        total_records = 0
         
        while True:
            try:
                records, next_offset = self.vector_db.client.scroll(
                    collection_name=self.vector_db.collection_name,
                    offset=offset,
                    limit=10000,
                    with_payload=True,
                    with_vectors=False
                )
                
                if not records:
                    break
                
                for record in records:
                    if record.payload:
                        edrpou = record.payload.get('edrpou', '')
                        if edrpou:
                            supplier_data[edrpou].append(record.payload)
                            total_records += 1
                
                if not next_offset:
                    break
                offset = next_offset
                
                logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {total_records:,} –∑–∞–ø–∏—Å—ñ–≤...")
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")
                break
        
        logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(supplier_data)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤")
        
        self.profiles = self._build_profiles(supplier_data)
        return self.profiles
    
    
    def _get_clusters_for_supplier(self, profile):
        """–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ –¥–ª—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞"""
        clusters = set()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
        categories = {}
        
        if isinstance(profile, dict):
            categories = profile.get('categories', {})
        elif hasattr(profile, 'categories'):
            categories = profile.categories if isinstance(profile.categories, dict) else {}
        else:
            self.logger.warning(f"–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {type(profile)}")
            return []
        
        # –®—É–∫–∞—î–º–æ –≤ –º–∞–ø–ø—ñ–Ω–≥—É
        for category in categories.keys():
            for cluster_name, cluster_categories in self.category_mappings.items():
                if category in cluster_categories:
                    clusters.add(cluster_name)
        
        return list(clusters)


    
    def _add_clusters_and_competitors(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ —Ç–∞ –ø–æ—à—É–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤"""
        logger.info("üîÑ –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å—Ç–µ—Ä–∏ —Ç–∞ —à—É–∫–∞—î–º–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤...")
        
        # –ö—Ä–æ–∫ 1: –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å—Ç–µ—Ä–∏
        for edrpou, profile in self.profiles.items():
            clusters = self._get_clusters_for_supplier(profile)
            
            # –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å—Ç–µ—Ä–∏ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É –ø—Ä–æ—Ñ—ñ–ª—é
            if hasattr(profile, 'clusters'):  # SupplierProfile –æ–±'—î–∫—Ç
                profile.clusters = clusters
            elif isinstance(profile, dict):  # –°–ª–æ–≤–Ω–∏–∫
                profile['clusters'] = clusters

        # –ö—Ä–æ–∫ 2: –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤
        from tqdm import tqdm
        for edrpou, profile in tqdm(self.profiles.items(), desc="–ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤"):
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª–∞—Å—Ç–µ—Ä–∏
            if hasattr(profile, 'clusters'):
                supplier_clusters = profile.clusters
            else:
                supplier_clusters = profile.get('clusters', [])
            
            if not supplier_clusters:
                if hasattr(profile, 'top_competitors'):
                    profile.top_competitors = []
                    profile.bottom_competitors = []
                else:
                    profile['top_competitors'] = []
                    profile['bottom_competitors'] = []
                continue
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤
            competitors = []
            
            for comp_edrpou, comp_profile in self.profiles.items():
                if comp_edrpou == edrpou:
                    continue
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª–∞—Å—Ç–µ—Ä–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
                if hasattr(comp_profile, 'clusters'):
                    comp_clusters = comp_profile.clusters
                else:
                    comp_clusters = comp_profile.get('clusters', [])
                
                common_clusters = set(supplier_clusters) & set(comp_clusters)
                
                if common_clusters:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –º–µ—Ç—Ä–∏–∫–∏
                    if hasattr(comp_profile, 'metrics'):  # SupplierProfile
                        metrics = comp_profile.metrics
                        competitor_data = {
                            'edrpou': comp_edrpou,
                            'name': comp_profile.name,
                            'year_wins': metrics.won_positions,
                            'year_total': metrics.total_positions,
                            'year_win_rate': metrics.position_win_rate,
                            'common_clusters': list(common_clusters)
                        }
                    else:  # –°–ª–æ–≤–Ω–∏–∫
                        metrics = comp_profile.get('metrics', {})
                        competitor_data = {
                            'edrpou': comp_edrpou,
                            'name': comp_profile.get('name', ''),
                            'year_wins': metrics.get('won_positions', 0),
                            'year_total': metrics.get('total_positions', 0),
                            'year_win_rate': metrics.get('position_win_rate', 0),
                            'common_clusters': list(common_clusters)
                        }
                    
                    competitors.append(competitor_data)
            
            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–µ—Ä–µ–º–æ–≥
            competitors.sort(key=lambda x: x['year_wins'], reverse=True)
            
            # –¢–æ–ø 10 —Ç–∞ –Ω–∞–π–≥—ñ—Ä—à—ñ 10
            top_10 = competitors[:10]
            bottom_10 = [c for c in reversed(competitors) if c['year_total'] > 0][:10]
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            if hasattr(profile, 'top_competitors'):
                profile.top_competitors = top_10
            if hasattr(profile, 'bottom_competitors'):
                profile.bottom_competitors = bottom_10

            

    
    def save_profiles(self, filepath='supplier_profiles_with_clusters.json'):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤"""
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤—Å—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ –≤ —Å–ª–æ–≤–Ω–∏–∫–∏ –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º
        profiles_to_save = {}
        
        for edrpou, profile in self.profiles.items():
            if hasattr(profile, 'to_dict'):
                # –¶–µ SupplierProfile –æ–±'—î–∫—Ç
                profiles_to_save[edrpou] = profile.to_dict()
            elif isinstance(profile, dict):
                # –¶–µ –≤–∂–µ —Å–ª–æ–≤–Ω–∏–∫
                profiles_to_save[edrpou] = profile
            else:
                logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è {edrpou}: {type(profile)}")
                continue
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(profiles_to_save, f, ensure_ascii=False, indent=2)
        
        logger.info(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(profiles_to_save)} –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –≤ {filepath}")


# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def create_or_update_profiles(system):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –∑ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏"""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —ñ—Å–Ω—É—é—á–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
    existing_profiles = [
        'supplier_profiles_with_clusters.json',
        'supplier_profiles_COMPLETE.json'
    ]
    
    profiles_exist = any(Path(f).exists() for f in existing_profiles)
    
    if profiles_exist:
        logger.info("üìÇ –ó–Ω–∞–π–¥–µ–Ω–æ —ñ—Å–Ω—É—é—á—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ")
        response = input("–û–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ (u) —á–∏ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—ñ (n)? [u/n]: ")
        
        if response.lower() == 'u':
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            from update_supplier_profiles_with_clusters import update_profiles_with_clusters_and_competitors
            update_profiles_with_clusters_and_competitors()
            return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ
    logger.info("üÜï –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –∑ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏...")
    
    builder = ProfileBuilderWithClusters(system.vector_db)
    profiles = builder._load_data_with_cache()
    builder.save_profiles()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    logger.info(f"–í—Å—å–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤: {len(profiles)}")
    
    cluster_count = defaultdict(int)
    for profile in profiles.values():
        for cluster in profile.clusters:
            cluster_count[cluster] += 1
    
    logger.info("\n–¢–æ–ø –∫–ª–∞—Å—Ç–µ—Ä–∏:")
    for cluster, count in sorted(cluster_count.items(), key=lambda x: x[1], reverse=True)[:10]:
        logger.info(f"  {cluster}: {count} –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤")

if __name__ == "__main__":
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
    from tender_analysis_system import TenderAnalysisSystem
    
    system = TenderAnalysisSystem(
        categories_file="categories.jsonl",
        qdrant_host="localhost",
        qdrant_port=6333
    )
    system.initialize_system()
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
    create_or_update_profiles(system)