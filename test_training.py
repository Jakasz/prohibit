# test_training.py
from tender_analysis_system import TenderAnalysisSystem
import json

# 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
print("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏...")
system = TenderAnalysisSystem()
system.initialize_system()

# 2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
print("\nüì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...")
test_data = []
with open("out_10_nodup.jsonl", 'r', encoding='utf-8') as f:
    for i, line in enumerate(f):
        if i >= 10000:  # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ 10k –¥–ª—è —Ç–µ—Å—Ç—É
            break
        test_data.append(json.loads(line))

print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(test_data)} –∑–∞–ø–∏—Å—ñ–≤")

# 3. –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö —ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
print("\nüìä –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö...")
results = system.load_and_process_data(test_data)
print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤: {results['new_suppliers']}")

# 4. –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
print("\nüéØ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ...")
try:
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    system.predictor.prepare_training_data_from_history(
        test_data,
        system.supplier_profiler.get_all_profiles()
    )
    
    # –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    training_results = system.train_prediction_model()
    print(f"‚úÖ AUC Score: {training_results['performance_metrics']['auc_score']:.4f}")
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏
    print("\nüíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏...")
    system.save_system("tender_system_trained.pkl")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞!")
    
except Exception as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    import traceback
    traceback.print_exc()