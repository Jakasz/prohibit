import logging
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from collections import defaultdict, Counter
import statistics
from dataclasses import dataclass


@dataclass
class CompetitionMetrics:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ—Ç—Ä–∏–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó"""
    intensity: float  # 0-1 (–Ω–∏–∑—å–∫–∞-–≤–∏—Å–æ–∫–∞)
    market_concentration: float  # HHI (0-1)
    entry_barrier: float  # 0-1 (–Ω–∏–∑—å–∫–∏–π-–≤–∏—Å–æ–∫–∏–π)
    price_volatility: float  # –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –≤–∞—Ä—ñ–∞—Ü—ñ—ó —Ü—ñ–Ω
    avg_participants: float  # –°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤
    win_rate_variance: float  # –í–∞—Ä—ñ–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å win rate
    market_stability: float  # 0-1 (–Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π-—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π)


class CompetitionAnalyzer:
    """
    –ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó –≤ —Ç–µ–Ω–¥–µ—Ä–∞—Ö
    
    –§—É–Ω–∫—Ü—ñ—ó:
    - –ê–Ω–∞–ª—ñ–∑ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    - –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—ó —Ä–∏–Ω–∫—É
    - –í–∏—è–≤–ª–µ–Ω–Ω—è –º–æ–Ω–æ–ø–æ–ª—ñ—Å—Ç—ñ–≤ —Ç–∞ –¥–æ–º—ñ–Ω—É—é—á–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤
    - –ê–Ω–∞–ª—ñ–∑ –±–∞—Ä'—î—Ä—ñ–≤ –≤—Ö–æ–¥—É
    - –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ —Ç–∏—Å–∫—É
    - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ç–µ–Ω–¥–µ—Ä–∞—Ö
    """
    
    def __init__(self, categories_manager, vector_db):
        self.logger = logging.getLogger(__name__)
        self.categories_manager = categories_manager
        self.vector_db = vector_db
        
        # –î–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó
        self.competition_data = defaultdict(lambda: {
            'tenders': defaultdict(list),  # tender_id -> [participants]
            'suppliers': defaultdict(lambda: {'participated': 0, 'won': 0, 'total_value': 0}),
            'price_history': [],
            'temporal_data': defaultdict(list),
            'category_crossover': defaultdict(set)  # –ø–µ—Ä–µ—Ö—Ä–µ—Å–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤
        })
        
        # –ö–µ—à —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫
        self.metrics_cache = {}
        self.cache_timestamp = {}
        
        # –ü–æ—Ä–æ–≥–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        self.thresholds = {
            'high_competition': 0.7,
            'medium_competition': 0.4,
            'high_concentration': 0.25,  # HHI
            'dominant_share': 0.4,  # –ß–∞—Å—Ç–∫–∞ —Ä–∏–Ω–∫—É
            'barrier_threshold': 0.6,
            'volatility_threshold': 0.3
        }
        
        self.logger.info("‚úÖ CompetitionAnalyzer —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    
    def update_competition_metrics(self, historical_data: List[Dict]):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
        self.logger.info(f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó –¥–ª—è {len(historical_data)} –∑–∞–ø–∏—Å—ñ–≤...")
        
        # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö
        self.competition_data = defaultdict(lambda: {
            'tenders': defaultdict(list),
            'suppliers': defaultdict(lambda: {'participated': 0, 'won': 0, 'total_value': 0}),
            'price_history': [],
            'temporal_data': defaultdict(list),
            'category_crossover': defaultdict(set)
        })
        
        # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö —Ç–∞ —Ç–µ–Ω–¥–µ—Ä–∞—Ö
        category_tenders = defaultdict(lambda: defaultdict(list))
        
        for item in historical_data:
            # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            item_name = item.get('F_ITEMNAME', '')
            categories = self.categories_manager.categorize_item(item_name)
            primary_category = categories[0][0] if categories else 'unknown'
            
            tender_id = item.get('F_TENDERNUMBER', '')
            edrpou = item.get('EDRPOU', '')
            
            if tender_id and edrpou:
                category_tenders[primary_category][tender_id].append(item)
        
        # –ê–Ω–∞–ª—ñ–∑ –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        for category, tenders in category_tenders.items():
            self._analyze_category_competition_detailed(category, tenders)
        
        # –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É
        self.metrics_cache.clear()
        self.cache_timestamp.clear()
        
        self.logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {len(category_tenders)} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
    
    def _analyze_category_competition_detailed(self, category: str, category_tenders: Dict[str, List[Dict]]):
        """–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        comp_data = self.competition_data[category]
        
        for tender_id, tender_items in category_tenders.items():
            participants = []
            prices = []
            
            for item in tender_items:
                edrpou = item.get('EDRPOU', '')
                if not edrpou:
                    continue
                
                participants.append(edrpou)
                
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
                supplier_data = comp_data['suppliers'][edrpou]
                supplier_data['participated'] += 1
                
                # –¶—ñ–Ω–∞
                budget = item.get('ITEM_BUDGET')
                if budget:
                    try:
                        price = float(budget)
                        prices.append(price)
                        if item.get('WON'):
                            supplier_data['total_value'] += price
                    except:
                        pass
                
                # –ü–µ—Ä–µ–º–æ–≥–∞
                if item.get('WON'):
                    supplier_data['won'] += 1
                
                # –¢–µ–º–ø–æ—Ä–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
                date_end = item.get('DATEEND')
                if date_end:
                    try:
                        date_obj = datetime.strptime(date_end, "%d.%m.%Y")
                        month_key = date_obj.strftime("%Y-%m")
                        comp_data['temporal_data'][month_key].append({
                            'supplier': edrpou,
                            'won': item.get('WON', False),
                            'price': price if 'price' in locals() else 0
                        })
                    except:
                        pass
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–µ–Ω–¥–µ—Ä–∞
            unique_participants = list(set(participants))
            comp_data['tenders'][tender_id] = unique_participants
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ü—ñ–Ω –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
            if prices:
                comp_data['price_history'].extend(prices)
        
        # –ê–Ω–∞–ª—ñ–∑ –ø–µ—Ä–µ—Ö—Ä–µ—Å–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π (–ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∏ –≤ –¥–µ–∫—ñ–ª—å–∫–æ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö)
        for supplier in comp_data['suppliers'].keys():
            comp_data['category_crossover'][supplier].add(category)
    
    def calculate_competition_metrics(self, category: str) -> CompetitionMetrics:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–µ—à—É
        cache_key = f"{category}_metrics"
        if (cache_key in self.metrics_cache and 
            cache_key in self.cache_timestamp and
            (datetime.now() - self.cache_timestamp[cache_key]).seconds < 3600):  # –ö–µ—à –Ω–∞ 1 –≥–æ–¥
            return self.metrics_cache[cache_key]
        
        if category not in self.competition_data:
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            default_metrics = CompetitionMetrics(
                intensity=0.0,
                market_concentration=0.0,
                entry_barrier=0.0,
                price_volatility=0.0,
                avg_participants=0.0,
                win_rate_variance=0.0,
                market_stability=0.0
            )
            self.metrics_cache[cache_key] = default_metrics
            self.cache_timestamp[cache_key] = datetime.now()
            return default_metrics
        
        comp_data = self.competition_data[category]
        
        # 1. –Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó
        participants_per_tender = [len(participants) for participants in comp_data['tenders'].values()]
        avg_participants = np.mean(participants_per_tender) if participants_per_tender else 0
        intensity = min(avg_participants / 8, 1.0)  # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ 1
        
        # 2. –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è —Ä–∏–Ω–∫—É (HHI - Herfindahl-Hirschman Index)
        if comp_data['suppliers']:
            total_participations = sum(data['participated'] for data in comp_data['suppliers'].values())
            if total_participations > 0:
                market_shares = [
                    (data['participated'] / total_participations) ** 2 
                    for data in comp_data['suppliers'].values()
                ]
                market_concentration = sum(market_shares)
            else:
                market_concentration = 0.0
        else:
            market_concentration = 0.0
        
        # 3. –ë–∞—Ä'—î—Ä –≤—Ö–æ–¥—É
        # –ë–∞–∑—É—î—Ç—å—Å—è –Ω–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ–π –≤–∞—Ä—Ç–æ—Å—Ç—ñ —É—á–∞—Å—Ç—ñ —Ç–∞ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
        prices = comp_data['price_history']
        if prices:
            min_price = min(prices)
            avg_price = np.mean(prices)
            # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è: –≤–∏—Å–æ–∫—ñ —Ü—ñ–Ω–∏ = –≤–∏—Å–æ–∫–∏–π –±–∞—Ä'—î—Ä
            price_barrier = min(min_price / 100000, 1.0) * 0.4
            # –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —É—á–∞—Å—Ç—ñ (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤)
            complexity_barrier = (1 / max(len(comp_data['suppliers']), 1)) * 0.6
            entry_barrier = price_barrier + complexity_barrier
        else:
            entry_barrier = 0.5  # –°–µ—Ä–µ–¥–Ω—ñ–π –±–∞—Ä'—î—Ä –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        
        # 4. –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å —Ü—ñ–Ω
        price_volatility = 0.0
        if len(prices) > 1:
            price_std = np.std(prices)
            price_mean = np.mean(prices)
            if price_mean > 0:
                price_volatility = price_std / price_mean
        
        # 5. –í–∞—Ä—ñ–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å win rate
        win_rates = []
        for supplier_data in comp_data['suppliers'].values():
            if supplier_data['participated'] > 0:
                win_rate = supplier_data['won'] / supplier_data['participated']
                win_rates.append(win_rate)
        
        win_rate_variance = np.var(win_rates) if len(win_rates) > 1 else 0.0
        
        # 6. –°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å —Ä–∏–Ω–∫—É (–±–∞–∑—É—î—Ç—å—Å—è –Ω–∞ —Ç–µ–º–ø–æ—Ä–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö)
        market_stability = self._calculate_market_stability(comp_data['temporal_data'])
        
        metrics = CompetitionMetrics(
            intensity=intensity,
            market_concentration=market_concentration,
            entry_barrier=min(entry_barrier, 1.0),
            price_volatility=min(price_volatility, 2.0),  # –û–±–º–µ–∂—É—î–º–æ –µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            avg_participants=avg_participants,
            win_rate_variance=win_rate_variance,
            market_stability=market_stability
        )
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∫–µ—à
        self.metrics_cache[cache_key] = metrics
        self.cache_timestamp[cache_key] = datetime.now()
        
        return metrics
    
    def _calculate_market_stability(self, temporal_data: Dict[str, List[Dict]]) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ —Ä–∏–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ–º–ø–æ—Ä–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
        if not temporal_data:
            return 0.5  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å
        
        monthly_participants = []
        monthly_winners = []
        
        for month, activities in temporal_data.items():
            participants = set(activity['supplier'] for activity in activities)
            winners = set(activity['supplier'] for activity in activities if activity['won'])
            
            monthly_participants.append(len(participants))
            monthly_winners.append(len(winners))
        
        # –°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å = –Ω–∏–∑—å–∫–∞ –≤–∞—Ä—ñ–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —É—á–∞—Å–Ω–∏–∫—ñ–≤ —Ç–∞ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
        if len(monthly_participants) > 1:
            participants_cv = np.std(monthly_participants) / np.mean(monthly_participants) if np.mean(monthly_participants) > 0 else 1
            winners_cv = np.std(monthly_winners) / np.mean(monthly_winners) if np.mean(monthly_winners) > 0 else 1
            
            # –Ü–Ω–≤–µ—Ä—Ç—É—î–º–æ: –Ω–∏–∑—å–∫–∞ –≤–∞—Ä—ñ–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å = –≤–∏—Å–æ–∫–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å
            stability = 1 - min((participants_cv + winners_cv) / 2, 1.0)
        else:
            stability = 0.5
        
        return stability
    
    def analyze_tender_competition(self, tender_item: Dict) -> Dict[str, Any]:
        """–ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–Ω–¥–µ—Ä–∞"""
        item_name = tender_item.get('F_ITEMNAME', '')
        categories = self.categories_manager.categorize_item(item_name)
        primary_category = categories[0][0] if categories else 'unknown'
        
        # –ë–∞–∑–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        metrics = self.calculate_competition_metrics(primary_category)
        
        # –ü–æ—à—É–∫ —Å—Ö–æ–∂–∏—Ö —Ç–µ–Ω–¥–µ—Ä—ñ–≤ –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        similar_tenders = self.vector_db.search_similar_tenders(tender_item, limit=20)
        
        # –ê–Ω–∞–ª—ñ–∑ —Å—Ö–æ–∂–∏—Ö —Ç–µ–Ω–¥–µ—Ä—ñ–≤
        similar_analysis = self._analyze_similar_tenders(similar_tenders)
        
        # –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó
        competition_forecast = self._forecast_competition_level(tender_item, metrics, similar_analysis)
        
        return {
            'category': primary_category,
            'category_metrics': {
                'competition_intensity': metrics.intensity,
                'market_concentration': metrics.market_concentration,
                'entry_barrier': metrics.entry_barrier,
                'price_volatility': metrics.price_volatility,
                'avg_participants': metrics.avg_participants,
                'market_stability': metrics.market_stability
            },
            'similar_tenders_analysis': similar_analysis,
            'competition_forecast': competition_forecast,
            'recommendations': self._generate_competition_recommendations(metrics, competition_forecast)
        }
    
    def _analyze_similar_tenders(self, similar_tenders: List[Dict]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª—ñ–∑ —Å—Ö–æ–∂–∏—Ö —Ç–µ–Ω–¥–µ—Ä—ñ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó"""
        if not similar_tenders:
            return {
                'avg_similarity': 0.0,
                'common_suppliers': [],
                'avg_budget': 0.0,
                'win_patterns': {},
                'competition_level': 'unknown'
            }
        
        # –ê–Ω–∞–ª—ñ–∑ —Å—Ö–æ–∂–æ—Å—Ç—ñ
        similarities = [tender['similarity_score'] for tender in similar_tenders]
        avg_similarity = np.mean(similarities)
        
        # –°–ø—ñ–ª—å–Ω—ñ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∏
        suppliers = [tender['edrpou'] for tender in similar_tenders if tender['edrpou']]
        supplier_counts = Counter(suppliers)
        common_suppliers = supplier_counts.most_common(5)
        
        # –°–µ—Ä–µ–¥–Ω—ñ–π –±—é–¥–∂–µ—Ç
        budgets = [tender['budget'] for tender in similar_tenders if tender['budget'] > 0]
        avg_budget = np.mean(budgets) if budgets else 0.0
        
        # –ü–∞—Ç–µ—Ä–Ω–∏ –ø–µ—Ä–µ–º–æ–≥
        win_patterns = {}
        for supplier, count in common_suppliers:
            wins = sum(1 for tender in similar_tenders 
                      if tender['edrpou'] == supplier and tender['won'])
            win_patterns[supplier] = {
                'participations': count,
                'wins': wins,
                'win_rate': wins / count if count > 0 else 0
            }
        
        # –†—ñ–≤–µ–Ω—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó
        if len(common_suppliers) > 5 and avg_similarity > 0.8:
            competition_level = 'high'
        elif len(common_suppliers) > 2 and avg_similarity > 0.6:
            competition_level = 'medium'
        else:
            competition_level = 'low'
        
        return {
            'avg_similarity': avg_similarity,
            'common_suppliers': common_suppliers,
            'avg_budget': avg_budget,
            'win_patterns': win_patterns,
            'competition_level': competition_level,
            'total_similar': len(similar_tenders)
        }
    
    def _forecast_competition_level(self, 
                                  tender_item: Dict, 
                                  category_metrics: CompetitionMetrics,
                                  similar_analysis: Dict) -> Dict[str, Any]:
        """–ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è —Ä—ñ–≤–Ω—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞"""
        
        # –§–∞–∫—Ç–æ—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
        factors = {}
        
        # 1. –§–∞–∫—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        category_factor = category_metrics.intensity * 0.4
        factors['category_intensity'] = category_factor
        
        # 2. –§–∞–∫—Ç–æ—Ä —Å—Ö–æ–∂–∏—Ö —Ç–µ–Ω–¥–µ—Ä—ñ–≤
        similar_factor = 0.0
        if similar_analysis['competition_level'] == 'high':
            similar_factor = 0.8
        elif similar_analysis['competition_level'] == 'medium':
            similar_factor = 0.5
        else:
            similar_factor = 0.2
        factors['similar_tenders'] = similar_factor * 0.3
        
        # 3. –§–∞–∫—Ç–æ—Ä –±—é–¥–∂–µ—Ç—É
        budget = tender_item.get('ITEM_BUDGET', 0)
        try:
            budget_value = float(budget) if budget else 0
            # –í–∏—Å–æ–∫–∏–π –±—é–¥–∂–µ—Ç = –±—ñ–ª—å—à–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó
            if budget_value > 1000000:
                budget_factor = 0.9
            elif budget_value > 100000:
                budget_factor = 0.6
            elif budget_value > 10000:
                budget_factor = 0.4
            else:
                budget_factor = 0.2
        except:
            budget_factor = 0.3
        
        factors['budget_attractiveness'] = budget_factor * 0.2
        
        # 4. –§–∞–∫—Ç–æ—Ä –±–∞—Ä'—î—Ä—ñ–≤ –≤—Ö–æ–¥—É (—ñ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏–π)
        barrier_factor = (1 - category_metrics.entry_barrier) * 0.1
        factors['entry_ease'] = barrier_factor
        
        # –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑
        total_forecast = sum(factors.values())
        total_forecast = min(max(total_forecast, 0.0), 1.0)  # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è 0-1
        
        # –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è
        if total_forecast > 0.7:
            competition_level = 'high'
            expected_participants = 5 + int(total_forecast * 10)
        elif total_forecast > 0.4:
            competition_level = 'medium'
            expected_participants = 3 + int(total_forecast * 5)
        else:
            competition_level = 'low'
            expected_participants = 1 + int(total_forecast * 3)
        
        return {
            'competition_score': total_forecast,
            'competition_level': competition_level,
            'expected_participants': min(expected_participants, 20),  # –†–æ–∑—É–º–Ω–µ –æ–±–º–µ–∂–µ–Ω–Ω—è
            'factors': factors,
            'confidence': min(similar_analysis.get('avg_similarity', 0) + 0.3, 1.0)
        }
    
    def _generate_competition_recommendations(self, 
                                            metrics: CompetitionMetrics,
                                            forecast: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó"""
        recommendations = []
        
        competition_level = forecast['competition_level']
        
        if competition_level == 'high':
            recommendations.extend([
                "–û—á—ñ–∫—É—î—Ç—å—Å—è –≤–∏—Å–æ–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è - –ø—ñ–¥–≥–æ—Ç—É–π—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é",
                "–†–æ–∑–≥–ª—è–Ω—å—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –¥–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ–∞—Ü—ñ—ó –∑–∞ —è–∫—ñ—Å—Ç—é –∞–±–æ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –ø–æ—Å–ª—É–≥–∞–º–∏",
                "–†–µ—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ —Ü—ñ–Ω–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤"
            ])
        elif competition_level == 'medium':
            recommendations.extend([
                "–ü–æ–º—ñ—Ä–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è - —î —Ö–æ—Ä–æ—à—ñ —à–∞–Ω—Å–∏ –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É",
                "–ó–æ—Å–µ—Ä–µ–¥—å—Ç–µ—Å—è –Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—ñ —Ü—ñ–Ω–∞/—è–∫—ñ—Å—Ç—å"
            ])
        else:
            recommendations.extend([
                "–ù–∏–∑—å–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è - –≤–∏—Å–æ–∫—ñ —à–∞–Ω—Å–∏ –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É",
                "–ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º-—Ä—ñ—à–µ–Ω–Ω—è"
            ])
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –º–µ—Ç—Ä–∏–∫
        if metrics.market_concentration > self.thresholds['high_concentration']:
            recommendations.append("–†–∏–Ω–æ–∫ –≤–∏—Å–æ–∫–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–æ–≤–∞–Ω–∏–π - –∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –ª—ñ–¥–µ—Ä—ñ–≤")
        
        if metrics.price_volatility > self.thresholds['volatility_threshold']:
            recommendations.append("–í–∏—Å–æ–∫–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å —Ü—ñ–Ω - –±—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ –∑ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è–º")
        
        if metrics.entry_barrier > self.thresholds['barrier_threshold']:
            recommendations.append("–í–∏—Å–æ–∫—ñ –±–∞—Ä'—î—Ä–∏ –≤—Ö–æ–¥—É - –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –≤—Å—ñ–º –≤–∏–º–æ–≥–∞–º")
        
        if metrics.market_stability < 0.3:
            recommendations.append("–ù–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π —Ä–∏–Ω–æ–∫ - —Ä–æ–∑–≥–ª—è–Ω—å—Ç–µ —Ä–∏–∑–∏–∫–∏ –¥–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è")
        
        return recommendations
    
    def get_category_competition_metrics(self, category: str) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—î—é"""
        metrics = self.calculate_competition_metrics(category)
        
        # –Ü–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—è –º–µ—Ç—Ä–∏–∫
        interpretation = {}
        
        if metrics.intensity < 0.3:
            interpretation['competition'] = "–ù–∏–∑—å–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è"
        elif metrics.intensity < 0.7:
            interpretation['competition'] = "–ü–æ–º—ñ—Ä–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è"
        else:
            interpretation['competition'] = "–í–∏—Å–æ–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è"
        
        if metrics.market_concentration < 0.15:
            interpretation['market'] = "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∏–π —Ä–∏–Ω–æ–∫"
        elif metrics.market_concentration < 0.25:
            interpretation['market'] = "–ü–æ–º—ñ—Ä–Ω–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–æ–≤–∞–Ω–∏–π"
        else:
            interpretation['market'] = "–í–∏—Å–æ–∫–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–æ–≤–∞–Ω–∏–π"
        
        # –¢–æ–ø –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∏
        top_suppliers = []
        if category in self.competition_data:
            suppliers = self.competition_data[category]['suppliers']
            sorted_suppliers = sorted(
                suppliers.items(),
                key=lambda x: x[1]['won'],
                reverse=True
            )[:5]
            
            for edrpou, data in sorted_suppliers:
                win_rate = data['won'] / data['participated'] if data['participated'] > 0 else 0
                top_suppliers.append({
                    'edrpou': edrpou,
                    'wins': data['won'],
                    'participations': data['participated'],
                    'win_rate': win_rate,
                    'total_value': data['total_value']
                })
        
        return {
            'metrics': {
                'intensity': metrics.intensity,
                'market_concentration': metrics.market_concentration,
                'entry_barrier': metrics.entry_barrier,
                'price_volatility': metrics.price_volatility,
                'avg_participants': metrics.avg_participants,
                'win_rate_variance': metrics.win_rate_variance,
                'market_stability': metrics.market_stability
            },
            'interpretation': interpretation,
            'top_suppliers': top_suppliers,
            'total_tenders': len(self.competition_data[category]['tenders']) if category in self.competition_data else 0,
            'total_suppliers': len(self.competition_data[category]['suppliers']) if category in self.competition_data else 0
        }
    
    def get_supplier_competition_metrics(self, edrpou: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞"""
        supplier_metrics = {
            'categories_active': [],
            'competitive_advantages': [],
            'market_position': {},
            'cross_category_analysis': {}
        }
        
        # –ü–æ—à—É–∫ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ –≤ —Ä—ñ–∑–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        for category, comp_data in self.competition_data.items():
            if edrpou in comp_data['suppliers']:
                supplier_data = comp_data['suppliers'][edrpou]
                category_metrics = self.calculate_competition_metrics(category)
                
                win_rate = supplier_data['won'] / supplier_data['participated'] if supplier_data['participated'] > 0 else 0
                
                category_info = {
                    'category': category,
                    'participations': supplier_data['participated'],
                    'wins': supplier_data['won'],
                    'win_rate': win_rate,
                    'total_value': supplier_data['total_value'],
                    'category_competition': category_metrics.intensity,
                    'market_share': self._calculate_supplier_market_share(edrpou, category)
                }
                
                supplier_metrics['categories_active'].append(category_info)
        
        # –ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∏—Ö –ø–µ—Ä–µ–≤–∞–≥
        if supplier_metrics['categories_active']:
            avg_win_rate = np.mean([cat['win_rate'] for cat in supplier_metrics['categories_active']])
            total_participations = sum([cat['participations'] for cat in supplier_metrics['categories_active']])
            
            supplier_metrics['market_position'] = {
                'overall_win_rate': avg_win_rate,
                'total_participations': total_participations,
                'active_categories': len(supplier_metrics['categories_active']),
                'specialization_score': self._calculate_specialization_score(supplier_metrics['categories_active'])
            }
            
            # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ñ –ø–µ—Ä–µ–≤–∞–≥–∏
            if avg_win_rate > 0.6:
                supplier_metrics['competitive_advantages'].append("–í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ")
            
            if len(supplier_metrics['categories_active']) > 3:
                supplier_metrics['competitive_advantages'].append("–î–∏–≤–µ—Ä—Å–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å")
            
            # –ê–Ω–∞–ª—ñ–∑ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
            specialization = max(supplier_metrics['categories_active'], key=lambda x: x['participations'])
            if specialization['participations'] > total_participations * 0.6:
                supplier_metrics['competitive_advantages'].append(f"–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {specialization['category']}")
        
        return supplier_metrics
    
    def _calculate_supplier_market_share(self, edrpou: str, category: str) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—Ç–∫–∏ —Ä–∏–Ω–∫—É –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        if category not in self.competition_data:
            return 0.0
        
        comp_data = self.competition_data[category]
        if edrpou not in comp_data['suppliers']:
            return 0.0
        
        supplier_participations = comp_data['suppliers'][edrpou]['participated']
        total_participations = sum(data['participated'] for data in comp_data['suppliers'].values())
        
        return supplier_participations / total_participations if total_participations > 0 else 0.0
    
    def _calculate_specialization_score(self, categories_active: List[Dict]) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä—ñ–≤–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞"""
        if not categories_active:
            return 0.0
        
        total_participations = sum(cat['participations'] for cat in categories_active)
        if total_participations == 0:
            return 0.0
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —ñ–Ω–¥–µ–∫—Å—É –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—ó –•–µ—Ä—Ñ—ñ–Ω–¥–∞–ª—è –¥–ª—è —É—á–∞—Å—Ç—ñ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
        shares = [(cat['participations'] / total_participations) ** 2 for cat in categories_active]
        hhi = sum(shares)
        
        return hhi
    
    def export_state(self) -> Dict[str, Any]:
        """–ï–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞–Ω—É –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó"""
        return {
            'competition_data': dict(self.competition_data),
            'metrics_cache': self.metrics_cache,
            'thresholds': self.thresholds
        }
    
    def load_state(self, state_data: Dict[str, Any]):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó"""
        self.competition_data = defaultdict(
            lambda: {
                'tenders': defaultdict(list),
                'suppliers': defaultdict(lambda: {'participated': 0, 'won': 0, 'total_value': 0}),
                'price_history': [],
                'temporal_data': defaultdict(list),
                'category_crossover': defaultdict(set)
            },
            state_data.get('competition_data', {})
        )
        
        self.metrics_cache = state_data.get('metrics_cache', {})
        self.thresholds = state_data.get('thresholds', self.thresholds)
        
        # –û—á–∏—â–µ–Ω–Ω—è timestamp –∫–µ—à—É –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        self.cache_timestamp.clear()
    
    def get_market_leaders(self, category: str, limit: int = 5) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª—ñ–¥–µ—Ä—ñ–≤ —Ä–∏–Ω–∫—É –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        if category not in self.competition_data:
            return []
        
        suppliers = self.competition_data[category]['suppliers']
        
        # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–µ—Ä–µ–º–æ–≥ —Ç–∞ win rate
        leaders = []
        for edrpou, data in suppliers.items():
            win_rate = data['won'] / data['participated'] if data['participated'] > 0 else 0
            market_share = self._calculate_supplier_market_share(edrpou, category)
            
            leaders.append({
                'edrpou': edrpou,
                'wins': data['won'],
                'participations': data['participated'],
                'win_rate': win_rate,
                'market_share': market_share,
                'total_value': data['total_value'],
                'dominance_score': win_rate * 0.6 + market_share * 0.4
            })
        
        # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ dominance_score
        leaders.sort(key=lambda x: x['dominance_score'], reverse=True)
        
        return leaders[:limit]
    
    def detect_market_anomalies(self, category: str) -> List[Dict]:
        """–í–∏—è–≤–ª–µ–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –∞–Ω–æ–º–∞–ª—ñ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        anomalies = []
        
        if category not in self.competition_data:
            return anomalies
        
        metrics = self.calculate_competition_metrics(category)
        comp_data = self.competition_data[category]
        
        # –ê–Ω–æ–º–∞–ª—ñ—è: –ú–æ–Ω–æ–ø–æ–ª—ñ–∑–∞—Ü—ñ—è
        if metrics.market_concentration > 0.4:
            dominant_supplier = max(
                comp_data['suppliers'].items(),
                key=lambda x: x[1]['participated']
            )
            anomalies.append({
                'type': 'monopolization',
                'severity': 'high' if metrics.market_concentration > 0.6 else 'medium',
                'description': f"–í–∏—Å–æ–∫–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è —Ä–∏–Ω–∫—É, –¥–æ–º—ñ–Ω—É—î –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫ {dominant_supplier[0]}",
                'metric_value': metrics.market_concentration
            })
        
        # –ê–Ω–æ–º–∞–ª—ñ—è: –¶—ñ–Ω–æ–≤–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å
        if metrics.price_volatility > 0.5:
            anomalies.append({
                'type': 'price_volatility',
                'severity': 'high' if metrics.price_volatility > 1.0 else 'medium',
                'description': "–ù–∞–¥–∑–≤–∏—á–∞–π–Ω–æ –≤–∏—Å–æ–∫–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å —Ü—ñ–Ω",
                'metric_value': metrics.price_volatility
            })
        
        # –ê–Ω–æ–º–∞–ª—ñ—è: –ù–∏–∑—å–∫–∞ —É—á–∞—Å—Ç—å
        if metrics.avg_participants < 1.5:
            anomalies.append({
                'type': 'low_participation',
                'severity': 'medium',
                'description': "–ù–∏–∑—å–∫–∞ —Å–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤ —É —Ç–µ–Ω–¥–µ—Ä–∞—Ö",
                'metric_value': metrics.avg_participants
            })
        
        # –ê–Ω–æ–º–∞–ª—ñ—è: –ù–µ—Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å
        if metrics.market_stability < 0.2:
            anomalies.append({
                'type': 'market_instability',
                'severity': 'high',
                'description': "–í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ —Ä–∏–Ω–∫—É",
                'metric_value': metrics.market_stability
            })
        
        return anomalies