#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è —Ç–µ–Ω–¥–µ—Ä—ñ–≤
"""

import os
import sys
import logging
from pathlib import Path

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
required_files = [
    'tender_analysis_system.py',
    'category_manager.py',
    'supplier_profiler.py',
    'competition_analyzer.py',
    'prediction_engine.py',
    'feature_extractor.py',
    'vector_database.py'
]

missing_files = []
for file in required_files:
    if not Path(file).exists():
        missing_files.append(file)

if missing_files:
    print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏:")
    for file in missing_files:
        print(f"   - {file}")
    print("\n–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ –ø—Ä–æ–µ–∫—Ç—É –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –≤ –ø–æ—Ç–æ—á–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó")
    sys.exit(1)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–∞–≤—á–µ–Ω–æ—ó –º–æ–¥–µ–ª—ñ
model_files = [
    'tender_system_trained.pkl'
]

model_found = any(Path(f).exists() for f in model_files)
if not model_found:
    print("‚ö†Ô∏è –£–í–ê–ì–ê: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –Ω–∞–≤—á–µ–Ω–æ—ó –º–æ–¥–µ–ª—ñ!")
    print("–ú–æ–¥–µ–ª—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –Ω–∞–≤—á–µ–Ω–∞ –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º.")
    print("\n–ó–∞–ø—É—Å—Ç—ñ—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é:")
    print("   python exec_training.py")
    response = input("\n–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –±–µ–∑ –º–æ–¥–µ–ª—ñ? (y/n): ")
    if response.lower() != 'y':
        sys.exit(1)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
profile_files = [
    'supplier_profiles_with_clusters.json'
]

profiles_found = any(Path(f).exists() for f in profile_files)
if not profiles_found:
    print("‚ö†Ô∏è –£–í–ê–ì–ê: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤!")
    print("–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—ñ –¥–ª—è –∫—Ä–∞—â–æ—ó —è–∫–æ—Å—Ç—ñ –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤.")

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è —à–∞–±–ª–æ–Ω—ñ–≤ —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
if not Path('templates').exists():
    Path('templates').mkdir()
    print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é templates/")

print("\n" + "="*60)
print("üöÄ –ó–ê–ü–£–°–ö –í–ï–ë-–Ü–ù–¢–ï–†–§–ï–ô–°–£ –°–ò–°–¢–ï–ú–ò –ü–†–û–ì–ù–û–ó–£–í–ê–ù–ù–Ø")
print("="*60)
print("\nüìã –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:")
print("1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∑–∞ –∞–¥—Ä–µ—Å–æ—é: http://localhost:5000")
print("2. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É")
print("3. –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
print("\n" + "="*60 + "\n")

# –ó–∞–ø—É—Å–∫ Flask –¥–æ–¥–∞—Ç–∫—É
try:
    from web_app import app
    app.run(debug=False, host='0.0.0.0', port=5000)
except KeyboardInterrupt:
    print("\n\n‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ")
except Exception as e:
    print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
    print("\n–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –≤—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:")
    print("   pip install -r requirements_web.txt")