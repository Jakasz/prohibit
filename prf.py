# –ó–£–ü–ò–ù–Ü–¢–¨ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ—Ü–µ—Å (Ctrl+C) —ñ –∑–∞–ø—É—Å—Ç—ñ—Ç—å —Ü–µ:

from asyncio.log import logger
from collections import defaultdict
import json
import logging
import os
from typing import Dict, List

from tqdm import tqdm
from supplier_profiler import SupplierMetrics, SupplierProfile
from tender_analysis_system import TenderAnalysisSystem


import asyncio
import aiohttp
from concurrent.futures import ThreadPoolExecutor
import pickle

class UltraFastProfileBuilder:    
    def __init__(self, system: TenderAnalysisSystem):
        self.system = system
        self.vector_db = system.vector_db
        self.profiler = system.supplier_profiler
        self.logger = logging.getLogger(__name__)



    # def _save_batch(self, batch: Dict, total_created: int):
    #     """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ü–û–í–ù–û–ì–û –±–∞—Ç—á—É –ø—Ä–æ—Ñ—ñ–ª—ñ–≤"""
    #     filename = f"profiles_batch_{total_created}.json"
        
    #     # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ü–û–í–ù–Ü –ø—Ä–æ—Ñ—ñ–ª—ñ, –∞ –Ω–µ —Å–ø—Ä–æ—â–µ–Ω—ñ
    #     full_batch = {}
    #     for edrpou, profile in batch.items():
    #         full_batch[edrpou] = profile.to_dict()  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –ø–æ–≤–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫
        
    #     with open(filename, 'w', encoding='utf-8') as f:
    #         json.dump(full_batch, f, ensure_ascii=False, indent=2)
        
    #     self.logger.info(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –±–∞—Ç—á {filename} –∑ {len(batch)} –ø—Ä–æ—Ñ—ñ–ª—è–º–∏")
    def _save_batch(self, batch: Dict, total_created: int):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ü–û–í–ù–û–ì–û –±–∞—Ç—á—É –ø—Ä–æ—Ñ—ñ–ª—ñ–≤"""
        filename = f"profiles_batch_{total_created}.json"
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ü–û–í–ù–Ü –ø—Ä–æ—Ñ—ñ–ª—ñ
        full_batch = {}
        for edrpou, profile in batch.items():
            full_batch[edrpou] = profile.to_dict()
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(full_batch, f, ensure_ascii=False, indent=2)
        
        self.logger.info(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –±–∞—Ç—á {filename} –∑ {len(batch)} –ø—Ä–æ—Ñ—ñ–ª—è–º–∏")




    def emergency_load_and_build(self):
        """–ê–í–ê–†–Ü–ô–ù–ò–ô –†–ï–ñ–ò–ú - –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ –ø–æ–±—É–¥–æ–≤–∞ –æ–¥–Ω–æ—á–∞—Å–Ω–æ"""
        self.logger.info("üö® –ê–í–ê–†–Ü–ô–ù–ò–ô –†–ï–ñ–ò–ú –ü–û–ë–£–î–û–í–ò")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ profiler
        if self.profiler is None:
            self.logger.error("‚ùå profiler is None! –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π...")
            from supplier_profiler import SupplierProfiler
            self.profiler = SupplierProfiler()
        
        if not hasattr(self.profiler, 'profiles'):
            self.profiler.profiles = {}
        
        # 1. –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–µ—à–æ–≤–∞–Ω–∏–π –¥–∞–º–ø —è–∫—â–æ —î
        cache_file = "all_data_cache.pkl"
        supplier_data = defaultdict(list)
        
        if os.path.exists(cache_file):
            self.logger.info("üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–µ—à –¥–∞–Ω–∏—Ö, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ...")
            with open(cache_file, 'rb') as f:
                supplier_data = pickle.load(f)
            self.logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(supplier_data)} –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤ –∑ –∫–µ—à—É")
        else:
            # 2. –ü–†–ê–í–ò–õ–¨–ù–ï –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ scroll
            self.logger.info("‚ö° –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...")
            
            # –û—Ç—Ä–∏–º–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
            collection_info = self.vector_db.client.get_collection(
                collection_name=self.vector_db.collection_name
            )
            total_points = collection_info.points_count
            self.logger.info(f"üìä –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤ –≤ –ë–î: {total_points:,}")
            
            pbar = tqdm(total=total_points, desc="–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö", unit="–∑–∞–ø–∏—Å—ñ–≤")
            
            # –ü–†–ê–í–ò–õ–¨–ù–ò–ô SCROLL
            offset = None
            total_loaded = 0
            batch_size = 10000  # –ë—ñ–ª—å—à–∏–π –±–∞—Ç—á –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
            
            while True:
                try:
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ scroll –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                    records, next_offset = self.vector_db.client.scroll(
                        collection_name=self.vector_db.collection_name,
                        offset=offset,
                        limit=batch_size,
                        with_payload=True,
                        with_vectors=False
                    )
                    
                    if not records:
                        break
                    
                    # –ì—Ä—É–ø—É—î–º–æ –ø–æ –Ñ–î–†–ü–û–£
                    for record in records:
                        if record.payload and 'edrpou' in record.payload:
                            edrpou = record.payload['edrpou']
                            supplier_data[edrpou].append(record.payload)
                            total_loaded += 1
                            pbar.update(1)
                    
                    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
                    if total_loaded % 50000 == 0:
                        self.logger.info(f"   –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {total_loaded:,} –∑–∞–ø–∏—Å—ñ–≤, —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –Ñ–î–†–ü–û–£: {len(supplier_data):,}")
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞—Ç—á—É
                    if not next_offset:
                        break
                    offset = next_offset
                    
                except Exception as e:
                    self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")
                    break
            
            pbar.close()
            self.logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {total_loaded:,} –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è {len(supplier_data):,} –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤")

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–µ—à –¥–∞–Ω–∏—Ö
            self.logger.info("üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–µ—à –¥–∞–Ω–∏—Ö...")
            with open(cache_file, 'wb') as f:
                pickle.dump(dict(supplier_data), f)

        # 3. –ü–æ–±—É–¥–æ–≤–∞ —ñ–Ω–¥–µ–∫—Å—É: tender_number -> {edrpou: [items]}
        self.logger.info("üî® –ü–æ–±—É–¥–æ–≤–∞ —ñ–Ω–¥–µ–∫—Å—É —É—á–∞—Å–Ω–∏–∫—ñ–≤ —Ç–µ–Ω–¥–µ—Ä—ñ–≤...")
        tender_participants = defaultdict(lambda: defaultdict(list))
        for edrpou, items in supplier_data.items():
            for item in items:
                tender = item.get('tender_number', '')
                if tender:
                    tender_participants[tender][edrpou].append(item)

        # 4. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
        self.logger.info("üèÅ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤...")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –í–°–Ü –ø—Ä–æ—Ñ—ñ–ª—ñ –¥–ª—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É
        all_profiles = {}
        
        final_pbar = tqdm(supplier_data.items(), desc="–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤")
        profiles_created = 0
        
        for edrpou, items in final_pbar:
            if len(items) > 0:
                try:
                    # –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û –ú–ï–¢–û–î profiler.create_profile()
                    profile = self.profiler.create_profile(edrpou, items)
                    
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫
                    all_profiles[edrpou] = profile
                    self.profiler.profiles[edrpou] = profile
                    profiles_created += 1
                        
                except Exception as e:
                    self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é {edrpou}: {e}")
                    import traceback
                    self.logger.error(traceback.format_exc())
                    
            final_pbar.set_postfix({
                'profiles': profiles_created,
                'items': len(items)
            })
        
        # 5. –§–Ü–ù–ê–õ–¨–ù–ï –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –í–°–Ü–• –ü–†–û–§–Ü–õ–Ü–í
        self.logger.info("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É –∑ —É—Å—ñ–º–∞ –ø—Ä–æ—Ñ—ñ–ª—è–º–∏...")
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–±—É–¥–æ–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥ profiler –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        self.profiler.save_profiles("supplier_profiles_COMPLETE.json")
        
        self.logger.info(f"‚úÖ –ì–û–¢–û–í–û! –°—Ç–≤–æ—Ä–µ–Ω–æ {len(all_profiles)} –ø—Ä–æ—Ñ—ñ–ª—ñ–≤")
        self.logger.info(f"üìÅ –§—ñ–Ω–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª: supplier_profiles_COMPLETE.json")
        
        # 6. –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        self.logger.info("\nüìä –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê:")
        sorted_suppliers = sorted(supplier_data.items(), key=lambda x: len(x[1]), reverse=True)
        for i, (edrpou, items) in enumerate(sorted_suppliers[:10]):
            profile = all_profiles.get(edrpou)
            if profile:
                self.logger.info(f"   #{i+1} –Ñ–î–†–ü–û–£ {edrpou}: {len(items)} –∑–∞–ø–∏—Å—ñ–≤ –≤ –¥–∞–Ω–∏—Ö, "
                            f"{profile.metrics.total_positions} –ø–æ–∑–∏—Ü—ñ–π –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ, "
                            f"win_rate={profile.metrics.win_rate:.2%}")
        
        return len(all_profiles)

    
    # def _create_profile(self, edrpou: str, all_items: List[Dict], 
    #              tender_participants: Dict[str, Dict[str, List[Dict]]]) -> SupplierProfile:
    #     """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ –∑ —É—Å—ñ–º–∞ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    #     from datetime import datetime, timedelta
    #     from collections import Counter, defaultdict
    #     import numpy as np
        
    #     # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    #     name = 'Unknown'
    #     if all_items:
    #         first_item = all_items[0]
    #         name = (first_item.get('supplier_name') or 
    #                 first_item.get('name') or 
    #                 'Unknown')
        
    #     # –£–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ç–µ–Ω–¥–µ—Ä–∏
    #     tender_items = defaultdict(list)
    #     for item in all_items:
    #         tender_num = item.get('tender_number', '')
    #         if tender_num:
    #             tender_items[tender_num].append(item)
        
    #     # –ë–∞–∑–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
    #     total_positions = len(all_items)
    #     won_positions = sum(1 for item in all_items if item.get('won', False))
    #     total_tenders = len(tender_items)
        
    #     # –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤–∏–≥—Ä–∞–Ω—ñ —Ç–µ–Ω–¥–µ—Ä–∏
    #     won_tenders = 0
    #     for tender_num, items in tender_items.items():
    #         if any(item.get('won', False) for item in items):
    #             won_tenders += 1
        
    #     # –í–ò–ó–ù–ê–ß–ê–Ñ–ú–û WIN_RATE –¢–£–¢!
    #     win_rate = won_tenders / total_tenders if total_tenders > 0 else 0
    #     position_win_rate = won_positions / total_positions if total_positions > 0 else 0
        
    #     # Recent metrics
    #     current_date = datetime.now()
    #     recent_date = current_date - timedelta(days=90)
    #     recent_items = []
        
    #     for item in all_items:
    #         date_str = (item.get('date_end') or 
    #                 item.get('date') or 
    #                 item.get('tender_date'))
    #         if date_str:
    #             try:
    #                 if '.' in date_str:
    #                     item_date = datetime.strptime(date_str.split(' ')[0], '%d.%m.%Y')
    #                 else:
    #                     item_date = datetime.strptime(date_str.split('T')[0], '%Y-%m-%d')
                    
    #                 if item_date >= recent_date:
    #                     recent_items.append(item)
    #             except:
    #                 pass
        
    #     recent_won = sum(1 for item in recent_items if item.get('won', False))
    #     recent_win_rate = recent_won / len(recent_items) if recent_items else 0
        
    #     # Growth rate
    #     growth_rate = 0
    #     if total_tenders > 10:
    #         sorted_tenders = sorted(tender_items.items(), 
    #                             key=lambda x: x[0])  # –°–æ—Ä—Ç—É—î–º–æ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–Ω–¥–µ—Ä–∞
            
    #         half = len(sorted_tenders) // 2
    #         first_half_won = sum(1 for _, items in sorted_tenders[:half] 
    #                         if any(item.get('won', False) for item in items))
    #         second_half_won = sum(1 for _, items in sorted_tenders[half:] 
    #                             if any(item.get('won', False) for item in items))
            
    #         if first_half_won > 0:
    #             growth_rate = (second_half_won - first_half_won) / first_half_won
    #         elif second_half_won > 0:
    #             growth_rate = 1.0
        
    #     # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    #     category_stats = Counter()
    #     industry_stats = Counter()
    #     cpv_stats = Counter()
    #     brand_stats = Counter()
        
    #     for item in all_items:
    #         # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó
    #         category = (item.get('primary_category') or 
    #                 item.get('category') or 
    #                 item.get('item_category'))
    #         if category and category != 'unknown':
    #             category_stats[category] += 1
            
    #         # –Ü–Ω–¥—É—Å—Ç—Ä—ñ—ó
    #         industry = item.get('industry')
    #         if industry:
    #             industry_stats[industry] += 1
            
    #         # CPV –∫–æ–¥–∏
    #         cpv = item.get('cpv') or item.get('cpv_code')
    #         if cpv and cpv != 0:
    #             cpv_str = str(cpv)
    #             if len(cpv_str) >= 8:
    #                 main_cpv = cpv_str[:8]
    #                 cpv_stats[main_cpv] += 1
            
    #         # –ë—Ä–µ–Ω–¥–∏
    #         item_name = item.get('item_name') or item.get('tender_name') or ''
    #         if item_name:
    #             known_brands = ['FENDT', 'JOHN DEERE', 'CASE', 'NEW HOLLAND', 'CLAAS',
    #                         'CATERPILLAR', 'KOMATSU', 'VOLVO', 'SCANIA', 'MAN']
    #             for brand in known_brands:
    #                 if brand.lower() in item_name.lower():
    #                     brand_stats[brand] += 1
        
    #     # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Å–ª–æ–≤–Ω–∏–∫–∏
    #     categories = {cat: {'count': count, 'percentage': count/total_positions * 100} 
    #                 for cat, count in category_stats.most_common(10)}
        
    #     industries = {ind: {'count': count, 'percentage': count/total_positions * 100}
    #                 for ind, count in industry_stats.most_common(10)}
        
    #     cpv_experience = {cpv: {'count': count, 'percentage': count/total_positions * 100}
    #                     for cpv, count in cpv_stats.most_common(20)}
        
    #     # Specialization score
    #     specialization_score = 0
    #     if cpv_stats:
    #         top_cpv_count = sum(count for _, count in cpv_stats.most_common(3))
    #         specialization_score = top_cpv_count / total_positions if total_positions > 0 else 0
        
    #     # Stability score
    #     stability_score = 0
    #     if tender_items and len(tender_items) > 1:
    #         dates = []
    #         for tender_num, items in tender_items.items():
    #             date_str = (items[0].get('date_end') or 
    #                     items[0].get('date') or 
    #                     items[0].get('tender_date'))
    #             if date_str:
    #                 try:
    #                     if '.' in date_str:
    #                         date_obj = datetime.strptime(date_str.split(' ')[0], '%d.%m.%Y')
    #                     else:
    #                         date_obj = datetime.strptime(date_str.split('T')[0], '%Y-%m-%d')
    #                     dates.append(date_obj)
    #                 except:
    #                     pass
            
    #         if len(dates) > 1:
    #             dates.sort()
    #             gaps = [(dates[i+1] - dates[i]).days for i in range(len(dates)-1)]
    #             if gaps:
    #                 avg_gap = np.mean(gaps)
    #                 std_gap = np.std(gaps)
    #                 stability_score = 1 - (std_gap / avg_gap) if avg_gap > 0 else 0
    #                 stability_score = max(0, min(1, stability_score))
        
    #     # Competition resistance
    #     competition_resistance = 0
    #     competitions_won = 0
    #     total_competitions = 0
        
    #     for tender_num, participants in tender_participants.items():
    #         if edrpou in participants and len(participants) > 1:
    #             total_competitions += 1
    #             won = any(item.get('won', False) for item in participants[edrpou])
    #             if won:
    #                 competitions_won += 1
        
    #     if total_competitions > 0:
    #         competition_resistance = competitions_won / total_competitions
    #     else:
    #         competition_resistance = win_rate  # –¢–µ–ø–µ—Ä win_rate –≤–∂–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π!
        
    #     # Brand expertise
    #     brand_expertise = [{'brand': brand, 'positions': count} 
    #                     for brand, count in brand_stats.most_common(10)]
        
    #     # –ü–µ—Ä–µ–≤–∞–≥–∏ —Ç–∞ –Ω–µ–¥–æ–ª—ñ–∫–∏
    #     competitive_advantages = []
    #     weaknesses = []
        
    #     if win_rate > 0.8:
    #         competitive_advantages.append("–î—É–∂–µ –≤–∏—Å–æ–∫–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥")
    #     if specialization_score > 0.7:
    #         competitive_advantages.append("–í—É–∑—å–∫–∞ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è")
    #     if stability_score > 0.7:
    #         competitive_advantages.append("–°—Ç–∞–±—ñ–ª—å–Ω–∞ —É—á–∞—Å—Ç—å —É —Ç–µ–Ω–¥–µ—Ä–∞—Ö")
    #     if competition_resistance > 0.8:
    #         competitive_advantages.append("–í–∏—Å–æ–∫–∏–π –æ–ø—ñ—Ä –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—ó")
    #     if growth_rate > 0.2:
    #         competitive_advantages.append("–ó—Ä–æ—Å—Ç–∞—é—á–∏–π —Ç—Ä–µ–Ω–¥ –ø–µ—Ä–µ–º–æ–≥")
        
    #     if win_rate < 0.3:
    #         weaknesses.append("–ù–∏–∑—å–∫–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥")
    #     if recent_win_rate < 0.1 and len(recent_items) > 5:
    #         weaknesses.append("–ü–∞–¥—ñ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ –æ—Å—Ç–∞–Ω–Ω—ñ–º —á–∞—Å–æ–º")
    #     if specialization_score < 0.3:
    #         weaknesses.append("–ó–∞–Ω–∞–¥—Ç–æ —à–∏—Ä–æ–∫–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –±–µ–∑ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó")
    #     if growth_rate < -0.2:
    #         weaknesses.append("–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Ç—Ä–µ–Ω–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
        
    #     # Market position
    #     if total_tenders >= 100 and win_rate > 0.7:
    #         market_position = "leader"
    #     elif total_tenders >= 50 and win_rate > 0.5:
    #         market_position = "strong_player"
    #     elif total_tenders >= 20 and win_rate > 0.3:
    #         market_position = "active_participant"
    #     elif total_tenders >= 10:
    #         market_position = "regular_participant"
    #     elif total_tenders >= 5:
    #         market_position = "occasional_participant"
    #     else:
    #         market_position = "new_player"
        
    #     # Reliability score
    #     reliability_score = (
    #         win_rate * 0.3 +
    #         stability_score * 0.2 +
    #         competition_resistance * 0.2 +
    #         (1 - abs(growth_rate)) * 0.1 +
    #         min(total_tenders / 100, 1) * 0.2
    #     )
        
    #     # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
    #     return SupplierProfile(
    #         edrpou=edrpou,
    #         name=name,
    #         metrics=SupplierMetrics(
    #             total_tenders=total_tenders,
    #             won_tenders=won_tenders,
    #             total_positions=total_positions,
    #             won_positions=won_positions,
    #             win_rate=win_rate,
    #             position_win_rate=position_win_rate,
    #             recent_win_rate=recent_win_rate,
    #             growth_rate=growth_rate,
    #             stability_score=stability_score,
    #             specialization_score=specialization_score,
    #             competition_resistance=competition_resistance
    #         ),
    #         categories=categories,
    #         industries=industries,
    #         cpv_experience=cpv_experience,
    #         brand_expertise=brand_expertise,
    #         competitive_advantages=competitive_advantages,
    #         weaknesses=weaknesses,
    #         market_position=market_position,
    #         reliability_score=reliability_score
    #     )


if __name__ == "__main__":
    system = TenderAnalysisSystem(
        categories_file="categories.jsonl",
        qdrant_host="localhost", 
        qdrant_port=6333
    )
    system.initialize_system()
    
    # –£–ª—å—Ç—Ä–∞ —à–≤–∏–¥–∫–∏–π –±—ñ–ª–¥–µ—Ä
    builder = UltraFastProfileBuilder(system)
    
    # –ü–û–á–•–ê–õ–ò!
    total = builder.emergency_load_and_build()